{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/app/models/landmark-init-set.js","src/app/models/landmark-particle-set.js","src/app/models/particle-set.js","src/app/models/particle.js","src/app/models/sensor.js","src/app/models/user.js","src/app/models/vote-accumulator.js","src/app/simulation/landmark.js","src/app/simulation/user.js","src/app/util/coordinate-system.js","src/app/util/linked-list.js","src/app/util/math.js","src/app/util/sampling.js","src/app/view/visualizer.js","src/app/app-local.js","src/tests/landmark-init.js","src/tests/voting.js"],"names":[],"mappings":"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AE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,iBAAiB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,iBAAiB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,qBAAqB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,kBAAkB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,iBAAiB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,mBAAmB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,oBAAoB,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","file":"slacjs-app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import LandmarkParticleSet from './landmark-particle-set';\n\nclass LandmarkInitializationSet {\n\t/**\n\t * Set containing multiple particle sets for initalisation of landmarks\n\t * @param  {Number} nParticles                 Number of particles in each set\n\t * @param  {Number} stdRange                   sd of range measurements\n\t * @param  {Number} randomParticles            Number of random particles\n\t * @param  {Number} effectiveParticleThreshold Threshold of effective particles\n\t * @return {LandmarkInitializationSet}\n\t */\n\tconstructor(nParticles = 500, stdRange = 4, randomParticles = 0, effectiveParticleThreshold = undefined) {\n\t\tthis.nParticles = nParticles;\n\t\tthis.stdRange = stdRange;\n\t\tthis.randomParticles = randomParticles;\n\n\t\tif (effectiveParticleThreshold === undefined) {\n\t\t\tthis.effectiveParticleThreshold = nParticles / 1.5;\n\t\t}\n\t\telse {\n\t\t\tthis.effectiveParticleThreshold = effectiveParticleThreshold;\n\t\t}\n\n\t\tthis.particleSetMap = new Map();\n\t}\n\n\t/**\n\t * Integrate a new measurement\n\t * @param {String} uid UID of landmark\n\t * @param {Number} x   Position of user\n\t * @param {Number} y   Position of user\n\t * @param {Number} r   Range measurement\n\t */\n\taddMeasurement(uid, x, y, r) {\n\t\tif (!this.has(uid)) {\n\t\t\tthis.particleSetMap.set(uid, new LandmarkParticleSet(\n\t\t\t\tthis.nParticles, this.stdRange, this.randomParticles, this.effectiveParticleThreshold\n\t\t\t));\n\t\t}\n\n\t\tthis.particleSetMap.get(uid).addMeasurement(x, y, r);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns true when there is a particle set for a landmark\n\t * @param  {String}  uid\n\t * @return {Boolean}\n\t */\n\thas(uid) {\n\t\treturn this.particleSetMap.has(uid);\n\t}\n\n\t/**\n\t * Returns best position estimate for a landmark\n\t * @param  {String} uid\n\t * @return {Object}\n\t */\n\testimate(uid) {\n\t\treturn this.particleSetMap.get(uid).positionEstimate();\n\t}\n\n\t/**\n\t * Remove a particle set\n\t * @param  {String} uid\n\t * @return {void}\n\t */\n\tremove(uid) {\n\t\tthis.particleSetMap.delete(uid);\n\t}\n\n\t/**\n\t * Return all particle sets\n\t * @return {Array}\n\t */\n\tparticleSets() {\n\t\treturn this.particleSetMap.values();\n\t}\n}\n\nexport default LandmarkInitializationSet;","import { randn, pdfn, variance } from '../util/math';\nimport { lowVarianceSampling, numberOfEffectiveParticles, normalizeWeights } from '../util/sampling';\nimport { polarToCartesian } from '../util/coordinate-system';\n\nclass LandmarkParticleSet {\n\t/**\n\t * Create a new particle set for finding the initial position of a landmark\n\t * @param  {Number} nParticles                 Number of particles\n\t * @param  {Number} stdRange                   SD of range measurements\n\t * @param  {Number} randomParticles            Number of random particles to use each update\n\t * @param  {Number} effectiveParticleThreshold Threshold for resampling\n\t * @return {LandmarkParticleSet}\n\t */\n\tconstructor(nParticles, stdRange, randomParticles, effectiveParticleThreshold) {\n\t\tthis.nParticles = nParticles;\n\t\tthis.stdRange = stdRange;\n\t\tthis.effectiveParticleThreshold = effectiveParticleThreshold;\n\t\tthis.randomParticles = randomParticles;\n\n\t\tthis.measurements = 0;\n\t\tthis.particles = [];\n\t}\n\n\t/**\n\t * Integrate a new measurement in the particle set\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} r\n\t */\n\taddMeasurement(x, y, r) {\n\n\t\tif (this.measurements === 0) {\n\n\t\t\t//Init the particle set by adding random particles around the user\n\t\t\tthis.particles = this._randomParticles(this.nParticles, x, y, r);\n\t\t}\n\t\telse {\n\t\t\tthis._updateWeights(x, y, r);\n\n\t\t\t//Determine whether resampling is effective now\n\t\t\t//Is based on the normalised weights\n\t\t\tconst weights = this.particles.map(p => p.weight);\n\t\t\tif (numberOfEffectiveParticles(weights) < this.effectiveParticleThreshold) {\n\n\t\t\t\t//Use low variance resampling to generate a set of new particles\n\t\t\t\t//Returns a list of N-randomParticles particles\n\t\t\t\tlet set = this._resample(this.nParticles - this.randomParticles);\n\n\t\t\t\t//Add new uniformly distributed particles tot the set\n\t\t\t\t//Random particles are distributed around the current position\n\t\t\t\tthis.particles = set.concat(this._randomParticles(this.randomParticles, x, y, r));\n\t\t\t}\n\t\t}\n\n\t\tthis.measurements++;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the current estimate of this landmark's position\n\t * @return {Object}\n\t */\n\tpositionEstimate() {\n\n\t\t//Fast check, never return before we have at least multiple measurements\n\t\tif (this.measurements < 10) {\n\t\t\treturn {estimate: 0, x: 0, y: 0, varX: 1, varY: 1};\n\t\t}\n\n\t\tconst {varX, varY} = this._particleVariance();\n\n\t\t//@todo Make this constraint configurable\n\t\tif (varX < 8 && varY < 8) {\n\n\t\t\t//Compute a weighted average of the particles\n\t\t\tconst {x, y} = this.averagePosition();\n\n\t\t\treturn {\n\t\t\t\testimate: 1,\n\t\t\t\tx, y,\n\t\t\t\tvarX, varY\n\t\t\t};\n\t\t}\n\n\t\treturn {estimate: 0, x: 0, y: 0, varX: 1, varY: 1};\n\t}\n\n\t/**\n\t * Return the particle with the heighest weight\n\t * @return {Particle}\n\t */\n\tbestParticle() {\n\t\tlet best = this.particles[0];\n\n\t\tthis.particles.forEach((p) => {\n\t\t\tif (p.weight > best.weight) {\n\t\t\t\tbest = p;\n\t\t\t}\n\t\t});\n\n\t\treturn best;\n\t}\n\n\t/**\n\t * Return a weighted average of this particle set\n\t * @return {Object} x,y\n\t */\n\taveragePosition() {\n\n\t\tconst weights = normalizeWeights(this.particles.map((p) => p.weight));\n\n\t\treturn {\n\t\t\tx: this.particles.reduce((prev, p, i) => prev + (weights[i] * p.x), 0),\n\t\t\ty: this.particles.reduce((prev, p, i) => prev + (weights[i] * p.y), 0)\n\t\t};\n\t}\n\n\t/**\n\t * Return the particle variance in X and Y\n\t * @return {Object} varx, vary\n\t */\n\t_particleVariance() {\n\n\t\treturn {\n\t\t\tvarX: variance(this.particles, (p) => p.x),\n\t\t\tvarY: variance(this.particles, (p) => p.y)\n\t\t};\n\t}\n\n\t/**\n\t * Resample the particle set and return a given number of new particles\n\t * @param  {Number} nSamples Number of particles to return\n\t * @return {Array}\n\t */\n\t_resample(nSamples) {\n\t\tconst weights = this.particles.map(p => p.weight);\n\n\t\treturn lowVarianceSampling(nSamples, weights).map((i) => {\n\t\t\treturn {\n\t\t\t\tx: this.particles[i].x,\n\t\t\t\ty: this.particles[i].y,\n\t\t\t\tweight: 1\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Init the particle set\n\t *\n\t * Creates a set of particles distributed around x,y at a distance\n\t * following a normal distribution with r as mean.\n\t *\n\t * @param  {Number} x Center x\n\t * @param  {Number} y Center y\n\t * @param  {Number} r range\n\t * @return {void}\n\t */\n\t_randomParticles(n, x, y, r) {\n\n\t\tconst deltaTheta = 2 * Math.PI / n;\n\t\tconst particles = [];\n\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst theta = i * deltaTheta;\n\t\t\tconst range = r + randn(0, this.stdRange);\n\t\t\tconst {dx, dy} = polarToCartesian(range, theta);\n\n\t\t\tparticles.push({x: x + dx, y: y + dy, weight: 1});\n\t\t}\n\n\t\treturn particles;\n\t}\n\n\t/**\n\t * Update each particle by updating their weights\n\t * @param  {Number} x\n\t * @param  {Number} y\n\t * @param  {Number} r\n\t * @return {void}\n\t */\n\t_updateWeights(x, y, r) {\n\n\t\tthis.particles.forEach((p) => {\n\n\t\t\t//Calculate distance estimate\n\t\t\tconst dist = Math.sqrt(Math.pow(p.x - x, 2) + Math.pow(p.y - y, 2));\n\n\t\t\t//What is the probability of r given dist? p(r|dist)\n\t\t\t//Update the weight accordingly\n\t\t\t//p(r) = N(r|dist,sd)\n\n\t\t\tconst weight = pdfn(r, dist, this.stdRange);\n\n\t\t\tp.weight = p.weight * weight;\n\t\t});\n\t}\n}\n\nexport default LandmarkParticleSet;","import Particle from './particle';\nimport LandmarkInitializationSet from './landmark-init-set';\nimport { lowVarianceSampling, numberOfEffectiveParticles } from '../util/sampling';\n\nclass ParticleSet {\n\t/**\n\t * Create a new particle set with a given number of particles\n\t * @param  {int} nParticles    \t Number of particles\n\t * @param  {float} options.x     Initial x postion of user\n\t * @param  {float} options.y     Initial y position of user\n\t * @param  {float} options.theta Initial theta of user\n\t * @return ParticleSet\n\t */\n\tconstructor(nParticles, {x, y, theta}) {\n\t\tthis.nParticles = nParticles;\n\n\t\tthis.particleList = [];\n\n\t\t//Internal list to keep track of initialised landmarks\n\t\tthis.initialisedLandmarks = [];\n\t\tthis.landmarkInitSet = new LandmarkInitializationSet();\n\n\t\tfor (let i = 0; i < nParticles; i++) {\n\t\t\tthis.particleList.push(new Particle({x, y, theta}));\n\t\t}\n\t}\n\n\t/**\n\t * Given a control, let each particle sample a new user position\n\t * @param  {[type]} control [description]\n\t * @return {ParticleSet}\n\t */\n\tsamplePose(control) {\n\t\tthis.particleList.forEach((p) => p.samplePose(control));\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Let each particle process an observation\n\t * @param  {object} obs\n\t * @return {ParticleSet}\n\t */\n\tprocessObservation(obs) {\n\n\t\tif (obs !== {}) {\n\n\t\t\tconst { uid, r } = obs;\n\n\t\t\tif (this.initialisedLandmarks.indexOf(uid) == -1) {\n\n\t\t\t\t//const {x: uX, y: uY} = this.userEstimate();\n\t\t\t\tconst uX = window.SlacApp.user.x;\n\t\t\t\tconst uY = window.SlacApp.user.y;\n\n\t\t\t\tthis.landmarkInitSet.addMeasurement(uid, uX, uY, r);\n\n\t\t\t\tconst {estimate, x, y, varX, varY} = this.landmarkInitSet.estimate(uid);\n\n\t\t\t\tif (estimate > 0.6) {\n\n\t\t\t\t\tthis.particleList.forEach((p) => {\n\t\t\t\t\t\tconsole.log({varX, varY})\n\t\t\t\t\t\tp.addLandmark({uid, r}, {x, y}, {varX, varY});\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.initialisedLandmarks.push(uid);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.particleList.forEach((p) => p.processObservation({uid, r}));\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resample the internal particle list using their weights\n\t *\n\t * Uses a low variance sample\n\t * @return {ParticleSet}\n\t */\n\tresample() {\n\n\t\tconst weights = this.particleList.map(p => p.weight);\n\t\tif (numberOfEffectiveParticles(weights) < (this.nParticles * 0.5)) {\n\n\t\t\tthis.particleList = lowVarianceSampling(this.nParticles, weights).map((i) => {\n\t\t\t\treturn new Particle({}, this.particleList[i]);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Not resampling');\n\t\t\tconsole.log(numberOfEffectiveParticles(weights));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get particles\n\t * @return {[Array]\n\t */\n\tparticles() {\n\t\treturn this.particleList;\n\t}\n\n\t/**\n\t * Return the particle with the heighest weight\n\t * @return {Particle}\n\t */\n\tbestParticle() {\n\t\tlet best = this.particleList[0];\n\n\t\tthis.particleList.forEach((p) => {\n\t\t\tif (p.weight > best.weight) {\n\t\t\t\tbest = p;\n\t\t\t}\n\t\t});\n\n\t\treturn best;\n\t}\n\n\t/**\n\t * Get the best estimate of the current user position\n\t * @return {object}\n\t */\n\tuserEstimate() {\n\t\tconst particle = this.bestParticle();\n\n\t\treturn {x: particle.user.x, y: particle.user.y};\n\t}\n}\n\nexport default ParticleSet;","import User from './user';\nimport { randn } from '../util/math';\n\nclass Particle {\n\t/**\n\t * Create a new particle\n\t * @param  {float} options.x     Initial x position of user\n\t * @param  {float} options.y     Initial y position of user\n\t * @param  {float} options.theta Initial theta of user\n\t * @return {Particle}\n\t */\n\tconstructor({x, y, theta}, parent = undefined) {\n\n\t\tif (parent !== undefined) {\n\t\t\tthis.user = User.copyUser(parent.user);\n\t\t\tthis.landmarks = this._copyMap(parent.landmarks);\n\t\t}\n\t\telse {\n\t\t\tthis.user = new User({x, y, theta});\n\t\t\tthis.landmarks = new Map();\n\t\t}\n\n\t\tthis.weight = 1;\n\t}\n\n\t/**\n\t * Given a control, sample a new user position\n\t * @param  {[type]} control [description]\n\t * @return {Particle}\n\t */\n\tsamplePose(control) {\n\n\t\t//Sample a pose from the 'control'\n\t\t//@todo Improve pose sampling\n\t\tconst r = Math.abs(randn(control.r, 0.3));\n\t\tconst theta = randn(control.theta, 0.05 * Math.PI);\n\n\t\tthis.user.move({r, theta});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Reset the weight of the particle\n\t * @return {Particle}\n\t */\n\tresetWeight() {\n\t\tthis.weight = 1;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register a new landmark\n\t * @param {string} options.uid\n\t * @param {float} options.r\n\t * @param {[type]} options.x \tInitial x position\n\t * @param {[type]} options.y    Initial y\n\t * @param {[type]} options.varX Cov in X direction\n\t * @param {[type]} options.varY Cov in Y direction\n\t */\n\taddLandmark({uid, r}, {x, y}, {varX, varY} = {varX: 1, varY: 1}) {\n\n\t\t//@todo find better values for initial covariance\n\t\tconst landmark = {\n\t\t\tx: x,\n\t\t\ty: y, \n\t\t\tcov: [[varX, 0], [0, varY]]\n\t\t};\n\n\t\tthis.landmarks.set(uid, landmark);\n\t}\n\n\t/**\n\t * Update a landmark using the EKF update rule\n\t * @param  {string} options.uid landmark id\n\t * @param  {float} options.r    range measurement\n\t * @return {void}\n\t */\n\tprocessObservation({uid, r}) {\n\n\t\t//Find the correct EKF\n\t\tconst l = this.landmarks.get(uid);\n\n\t\t//Compute the difference between the predicted user position of this\n\t\t//particle and the predicted position of the landmark.\n\t\tconst dx = this.user.x - l.x;\n\t\tconst dy = this.user.y - l.y;\n\n\t\t//@todo find better values for default coviarance\n\t\tconst errorCov = randn(2, 0.1);\n\n\t\tconst dist = Math.max(0.001, Math.sqrt((dx * dx) + (dy * dy)));\n\n\t\t//Compute innovation: difference between the observation and the predicted value\n\t\tconst v = r - dist;\n\n\t\t//Compute Jacobian\n\t\tconst H = [-dx / dist, -dy / dist];\n\n\t\t//Compute covariance of the innovation\n\t\t//covV = H * Cov_s * H^T + error\n\t\tconst HxCov = [l.cov[0][0] * H[0] + l.cov[0][1] * H[1],\n\t\t\t\t\t\tl.cov[1][0] * H[0] + l.cov[1][1] * H[1]];\n\n\t\tconst covV = (HxCov[0] * H[0]) + (HxCov[1] * H[1]) + errorCov;\n\n\t\t//Kalman gain\n\t\tconst K = [HxCov[0] * (1 / covV), HxCov[1] * (1.0 / covV)];\n\n\t\t//Calculate the new position of the landmark\n\t\tconst newX = l.x + (K[0] * v);\n\t\tconst newY = l.y + (K[1] * v);\n\n\t\t//Calculate the new covariance\n\t\t//cov_t = cov_t-1 - K * covV * K^T\n\t\tconst updateCov = [\n\t\t\t[K[0] * K[0] * covV, K[0] * K[1] * covV],\n\t\t\t[K[1] * K[0] * covV, K[1] * K[1] * covV]\n\t\t];\n\n\t\tconst newCov = [[l.cov[0][0] - updateCov[0][0], l.cov[0][1] - updateCov[0][1]],\n\t\t\t\t\t\t[l.cov[1][0] - updateCov[1][0], l.cov[1][1] - updateCov[1][1]]];\n\n\t\t//Update the weight of the particle\n\t\tthis.weight = this.weight - (v * (1.0 / covV) * v);\n\n\t\t//Update particle\n\t\tl.x = newX;\n\t\tl.y = newY;\n\t\tl.cov = newCov;\n\t}\n\n\t/**\n\t * Deep copy a mpa\n\t * @param  {Map} map\n\t * @return {Map}\n\t */\n\t_copyMap(map) {\n\t\tconst copy = new Map();\n\n\t\tfor (let [key, value] of map.entries()) {\n\t\t\tcopy.set(key, this._copyLandmark(value));\n\t\t}\n\n\t\treturn copy;\n\t}\n\n\t/**\n\t * Deep copy a landmark\n\t * @param  {object} landmark\n\t * @return {landmark}\n\t */\n\t_copyLandmark(landmark) {\n\t\tlet copy = {};\n\n\t\tcopy.x = landmark.x;\n\t\tcopy.y = landmark.y;\n\t\tcopy.cov = [...landmark.cov];\n\n\t\treturn copy;\n\t}\n}\n\nexport default Particle;","class Sensor {\n\t/**\n\t * Sensor\n\t * @param  {int} options.n\n\t * @param  {int} options.txPower\n\t * @param  {int} options.noise\n\t * @param  {int} options.range\n\t * @return {Senser}\n\t */\n\tconstructor({n, txPower, noise, range}) {\n\t\tthis.landmarks = new Map();\n\t\tthis.iteration = 0;\n\t\tthis.landmarkConfig = {n, txPower, noise, range};\n\t}\n\n\t/**\n\t * Process a new observation\n\t * @param {string} options.uid\n\t * @param {float} options.rssi\n\t */\n\taddObservation({uid, rssi}) {\n\t\tif (this.landmarks.has(uid)) {\n\t\t\tthis._updateLandmark(uid, rssi);\n\t\t}\n\t\telse {\n\t\t\tthis._registerLandmark(uid, rssi);\n\t\t}\n\t}\n\n\t/**\n\t * Get all averaged observations since the last request\n\t *\n\t * Updates the interal iteration counter\n\t * @return {Array}\n\t */\n\tgetObservations() {\n\t\tconst observedLandmarks = [];\n\n\t\t//Get all the landmarks that have been upated during the current iteration\n\t\tthis.landmarks.forEach((l, uid) => {\n\t\t\tif (l.iteration === this.iteration) {\n\t\t\t\tobservedLandmarks.push({uid, r: this._rssiToDistance(l.rssi)});\n\t\t\t}\n\t\t});\n\n\t\tthis.iteration++;\n\n\t\treturn observedLandmarks;\n\t}\n\n\t/**\n\t * Update a landmark given a new rssi observation\n\t * @param  {float} uid\n\t * @param  {float} rssi\n\t * @return {void}\n\t */\n\t_updateLandmark(uid, rssi) {\n\n\t\tconst landmark = this.landmarks.get(uid);\n\t\tconst alpha = this._computeAlpha(rssi, landmark.iteration);\n\n\t\tlandmark.rssi = (rssi * alpha) + (landmark.rssi * (1 - alpha));\n\t\tlandmark.iteration = this.iteration;\n\t}\n\n\t/**\n\t * Add a new landmark to the interal list\n\t * @param  {string} uid  Landanme uid\n\t * @param  {float} rssi  Current RSSI value\n\t * @return {void}\n\t */\n\t_registerLandmark(uid, rssi) {\n\t\tthis.landmarks.set(uid, {\n\t\t\tuid: uid,\n\t\t\trssi: rssi,\n\t\t\titeration: this.iteration\n\t\t});\n\t}\n\n\t/**\n\t * Compute the alpha for the exponential weigthed average\n\t * @param  {float} rssi\n\t * @param  {int} previousIteration\n\t * @return {float}\n\t */\n\t_computeAlpha(rssi, previousIteration) {\n\t\t//See http://www.hindawi.com/journals/ijdsn/aa/195297/\n\t\t//Alpha is based on the RSSI (larger values means larger alpha)\n\t\t//The difference in time defines the maximum value of alpha, this increases\n\t\t//with the time between the previous observation.\n\t\t//\n\t\t//@todo Currently we only use the timediff\n\t\tconst timeDiff = Math.max(this.iteration - previousIteration, 1);\n\n\t\tconst timeFactor = 1 - (1 / (Math.pow(timeDiff, 1.5) + 1));\n\n\t\t//const rssiFactor = Math.min(1, 1 - (0.5 * ((-10 - rssi) / 60)));\n\n\t\treturn timeFactor;\n\t}\n\n\t/**\n\t * Convert RSSI to a distance estimate\n\t * @param  {float} rssi\n\t * @return {float}\n\t */\n\t_rssiToDistance(rssi) {\n\t\treturn Math.pow(10, (rssi - this.landmarkConfig.txPower) / (-10 * this.landmarkConfig.n));\n\t}\n}\n\nexport default Sensor;","import { addTheta, polarToCartesian } from '../util/coordinate-system';\nimport LinkedList from '../util/linked-list';\n\nclass User {\n\t/**\n\t * Create a new user\n\t * @param  {float} options.x     Starting x location of the user\n\t * @param  {float} options.y     Starting y location of the user\n\t * @param  {float} options.theta Direction of the user in radials relative to the x-axis\n\t * @param  {LinkedList} trace \t Optional trace to extend\n\t * @return {User}\n\t */\n\tconstructor({x, y, theta}, trace = undefined) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.theta = theta;\n\n\t\tif (trace === undefined) {\n\t\t\tthis.trace = new LinkedList().add({x, y, theta});\n\t\t}\n\t\telse {\n\t\t\t//We use a LinkedList here to make use of the reference to the\n\t\t\t//trace instead of copying the whole list\n\t\t\tthis.trace = new LinkedList(trace);\n\t\t}\n\t}\n\n\t/**\n\t * Move a user to a new position\n\t * @param  {float} r\n\t * @param  {float} theta\n\t * @return {User}\n\t */\n\tmove({r, theta}) {\n\n\t\tconst {dx, dy} = polarToCartesian(r, theta);\n\n\t\tthis.x += dx;\n\t\tthis.y += dy;\n\t\tthis.theta = theta;\n\n\t\tthis.trace.add({x: this.x, y: this.y, theta: this.theta});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Safely copy a user object\n\t * @param  {User} user User to copy\n\t * @return {User}\n\t */\n\tstatic copyUser(user) {\n\t\treturn new User({\n\t\t\tx: user.x,\n\t\t\ty: user.y,\n\t\t\ttheta: user.theta\n\t\t}, user.trace);\n\t}\n}\n\nexport default User;","class VoteAccumulator {\n\n\t/**\n\t * Create new voting system\n\t * @param  {Number} dimension Size of the voting matrix coordinate system\n\t * @param  {Number} precision Defines amount of cells by dimension/precision\n\t * @param  {Number} startX    Center of the voting matrix\n\t * @param  {Number} startY    Center of the voting matrix\n\t * @return {VoteAccumulator}\n\t */\n\tconstructor(dimension, precision, startX = 0, startY = 0) {\n\t\tthis.dimension = dimension;\n\t\tthis.precision = precision;\n\t\tthis.centerX = startX;\n\t\tthis.centerY = startY;\n\n\t\tthis.measurements = 0;\n\t\tthis.size = Math.round(dimension / precision);\n\n\t\tthis.votes = new Array(this.size).fill(0).map(() => new Array(this.size).fill(0));\n\t}\n\n\taddMeasurement(x, y, r) {\n\n\t\tthis.measurements++;\n\n\t\tx = x - this.centerX;\n\t\ty = y - this.centerY;\n\n\t\tif (!this._inRange(x, y)) {\n\t\t\tconsole.error('Coordinates not in range of VoteAccumulator internal cell matrix ' +\n\t\t\t\t\t\t\t`with x:${x}, y:${y} and centerX:${this.centerX}, centerY:${this.centerY}.`);\n\t\t}\n\n\t\tif (!this._inRange(x + r, y) || !this._inRange(x, y + r)) {\n\t\t\tconsole.error('Range measurement not in range of VoteAccumulator internal cell matrix.');\n\t\t}\n\n\t\t//Get the current center\n\t\tconst {row, column} = this._cartesianToCell(x, y);\n\n\t\t//Convert the range to cell distance\n\t\tconst dist = Math.round(r / this.precision);\n\n\t\t//Add votes according to midpoint circle algorithm\n\t\tthis._midpointCircle(row, column, dist);\n\n\t\treturn this;\n\t}\n\n\tpositionEstimate() {\n\t\tif (this.measurements < 3) {\n\t\t\treturn {estimate: 0, x: 0, y: 0};\n\t\t}\n\n\t\tlet firstValue = 0;\n\t\tlet firstCell = {};\n\t\tlet secondValue = 0;\n\t\tlet secondCell = {};\n\n\t\tfor (let row = 0; row < this.size; row++) {\n\t\t\tfor (let column = 0; column < this.size; column++) {\n\t\t\t\tif (this.votes[row][column] > firstValue) {\n\t\t\t\t\tfirstValue = this.votes[row][column];\n\t\t\t\t\tfirstCell = {row, column};\n\t\t\t\t}\n\t\t\t\telse if (this.votes[row][column] > secondValue) {\n\t\t\t\t\tsecondValue = this.votes[row][column];\n\t\t\t\t\tsecondCell = {row, column};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst {x, y} = this._cellToCartesian(firstCell.row, firstCell. column);\n\n\t\treturn {\n\t\t\testimate: (firstValue / (firstValue + secondValue)),\n\t\t\tx, y\n\t\t};\n\t}\n\n\t/**\n\t * Return a string representation of the vote matrix\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.votes.reduce((output, row) => {\n\t\t\treturn output + row.reduce((rowOutput, cell) => {\n\t\t\t\tif (cell > 9) {\n\t\t\t\t\treturn rowOutput + cell + ' ';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn rowOutput + cell + '  ';\n\t\t\t\t}\n\t\t\t}) + '\\n';\n\t\t}, '\\n');\n\t}\n\n\t/**\n\t * Return true when an cartesian coordinate is in range\n\t * @param  {Number} x\n\t * @param  {Number} y\n\t * @return {Boolean}\n\t */\n\t_inRange(x, y) {\n\t\treturn (\n\t\t\t\tx >= (-0.5 * this.dimension) &&\n\t\t\t\tx <= (0.5 * this.dimension) &&\n\t\t\t\ty >= (-0.5 * this.dimension) &&\n\t\t\t\ty <= (0.5 * this.dimension)\n\t\t);\n\t}\n\n\t/**\n\t * Place votes based on the midpoint circle algorithm\n\t * @param  {Number} row    Center\n\t * @param  {Number} column Center\n\t * @param  {Number} r      Radius\n\t * @return {void}\n\t */\n\t_midpointCircle(row, column, r) {\n\n\t\tlet x = r;\n\t\tlet y = 0;\n\t\tlet radiusError = 1 - x;\n\n\t\twhile (x >= y) {\n\t\t\tthis._vote(y + row,  x + column);\n\t\t\tthis._vote(y + row, -x + column);\n\t\t\tthis._vote(-y + row, -x + column);\n\t\t\tthis._vote(-y + row,  x + column);\n\n\t\t\tif (x != y) {\n\t\t\t\tthis._vote(x + row,  y + column);\n\t\t\t\tthis._vote(x + row, -y + column);\n\t\t\t\tthis._vote(-x + row, -y + column);\n\t\t\t\tthis._vote(-x + row,  y + column);\n\t\t\t}\n\n\t\t\ty++;\n\n\t\t\tif (radiusError < 0) {\n\t\t\t\tradiusError += 2 * y + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tx--;\n\t\t\t\tradiusError += 2 * (y - x) + 1;\n\t\t\t}\n\t\t}\n\n\t\t//At the ends of the cross, we have double votes, substract these\n\t\tthis._vote(row + r, column, -1);\n\t\tthis._vote(row - r, column, -1);\n\t\tthis._vote(row, column + r, -1);\n\t\tthis._vote(row, column - r, -1);\n\t}\n\n\t/**\n\t * Increase votes at a specific cell\n\t * @param  {Number} row\n\t * @param  {Number} column\n\t * @return {void}\n\t */\n\t_vote(row, column, value = 1) {\n\n\t\tif (row >= this.size || column >= this.size || row < 0 || column < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.votes[row][column] +=  value;\n\n\t\t/*if (row > 0) {\n\t\t\tthis.votes[row - 1][column] += value;\n\n\t\t\tif (column > 0) {\n\t\t\t\tthis.votes[row - 1][column - 1] += value;\n\t\t\t}\n\t\t\tif (column < (this.size - 1)) {\n\t\t\t\tthis.votes[row - 1][column + 1] += value;\n\t\t\t}\n\t\t}\n\n\t\tif (row < (this.size - 1)) {\n\t\t\tthis.votes[row + 1][column] += value;\n\n\t\t\tif (column > 0) {\n\t\t\t\tthis.votes[row + 1][column - 1] += value;\n\t\t\t}\n\t\t\tif (column < (this.size - 1)) {\n\t\t\t\tthis.votes[row + 1][column + 1] += value;\n\t\t\t}\n\t\t}\n\n\t\tif (column > 0) {\n\t\t\tthis.votes[row][column - 1] += value;\n\t\t}\n\n\t\tif (column < (this.size - 1)) {\n\t\t\tthis.votes[row][column + 1] += value;\n\t\t}*/\n\t}\n\n\t/**\n\t * Convert a cartesian coordinate to a specific cell\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {object}\n\t */\n\t_cartesianToCell(x, y) {\n\t\treturn {\n\t\t\tcolumn: Math.floor((x + (0.5 * this.dimension)) / this.precision),\n\t\t\trow: Math.floor((y + (0.5 * this.dimension)) / this.precision)\n\t\t};\n\t}\n\n\t/**\n\t * Convert a cell to cartesian coordinates\n\t * @param  {int} row\n\t * @param  {int} column\n\t * @return {object}\n\t */\n\t_cellToCartesian(row, column) {\n\t\treturn {\n\t\t\tx: ((column + 0.5) * this.precision) - (0.5 * this.dimension),\n\t\t\ty: ((row + 0.5) * this.precision) - (0.5 * this.dimension)\n\t\t};\n\t}\n}\n\nexport default VoteAccumulator;","import { log, randn } from '../util/math';\n\nexport class SimulatedLandmarkSet {\n\n\t/**\n\t * Create simulated landmarks\n\t * @param  {Number} N              Amount of landmarks\n\t * @param  {Number} options.xRange Max x\n\t * @param  {Number} options.yRange Max y\n\t * @param  {Number} updateRate     Refresh rate\n\t * @param  {Object} landmarkConfig Landmark config\n\t * @return {SimulatedLandmarkSet}\n\t */\n\tconstructor(N, {xRange, yRange}, updateRate, landmarkConfig) {\n\t\tthis.landmarks = [];\n\t\tthis.xRange = xRange;\n\t\tthis.yRange = yRange;\n\t\tthis.updateRate = updateRate;\n\t\tthis.landmarkConfig = landmarkConfig;\n\t\tthis.broadcastId = undefined;\n\n\t\tfor (let i = 0; i < N; i++) {\n\t\t\tthis.landmarks.push(this._randomLandmark('landmark-' + i));\n\t\t}\n\t}\n\n\t/**\n\t * Start broadcasting landmark data\n\t * @param  {Sensor} sensor\n\t * @param  {User} user\n\t * @return {void}\n\t */\n\tstartBroadcast(sensor, user) {\n\t\tthis.broadcastId = window.setTimeout(() => this._broadCast(sensor, user), this.updateRate);\n\t}\n\n\t/**\n\t * Stop broadcast of landmark data\n\t * @return {void}\n\t */\n\tstopBroadCast() {\n\t\tif (this.broadcastId !== undefined) {\n\t\t\twindow.clearTimeout(this.broadcastId);\n\t\t}\n\t}\n\n\t/**\n\t * Set the update rate of the landmarks\n\t * @param {float} updateRate\n\t * @return {SimulatedLandmarkSet}\n\t */\n\tsetUpdateRate(updateRate) {\n\t\tthis.updateRate = updateRate;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Simulate RSSI measurements for all landmarks in range\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {Array}\n\t */\n\tmeasurementsAtPoint(x, y) {\n\t\tconst landmarks = this.landmarksInRange(x, y);\n\t\tconst measurements = [];\n\n\t\treturn landmarks.forEach((l) => measurements.push({uid: l.uid, rssi: l.rssiAt(x, y)}));\n\t}\n\n\t/**\n\t * Get a random measurement from a device in range\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {object}\n\t */\n\trandomMeasurementAtPoint(x, y) {\n\t\tconst landmarks = this.landmarksInRange(x, y);\n\n\t\tif (landmarks.length > 0) {\n\t\t\tconst landmark = landmarks[Math.floor(Math.random() * landmarks.length)];\n\n\t\t\treturn {uid: landmark.uid, rssi: landmark.rssiAt(x, y)};\n\t\t}\n\t}\n\n\t/**\n\t * Return all landmarks within range of a given x,y position\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {Array}\n\t */\n\tlandmarksInRange(x, y) {\n\t\treturn this.landmarks.filter((l) => l.isInRange(x, y));\n\t}\n\n\t/**\n\t * Create a landmark at a random position\n\t * @param  {string} uid UID\n\t * @return {Landmark}\n\t */\n\t_randomLandmark(uid) {\n\t\treturn new Landmark(uid, {\n\t\t\tx: Math.random() * (2 * this.xRange) - this.xRange,\n\t\t\ty: Math.random() * (2 * this.yRange) - this.yRange\n\t\t}, this.landmarkConfig);\n\t}\n\n\t/**\n\t * Simulate a broadcast\n\t *\n\t * Sets a timeout to run this function again after a fixed amount of time\n\t * @param  {Sensor} sensor\n\t * @param  {User} user\n\t * @return {void}\n\t */\n\t_broadCast(sensor, user) {\n\n\t\tconst measurement = this.randomMeasurementAtPoint(user.x, user.y);\n\n\t\tif (measurement !== undefined) {\n\t\t\tsensor.addObservation(measurement);\n\t\t}\n\n\t\tthis.broadcastId = window.setTimeout(() => this._broadCast(sensor, user), this.updateRate);\n\t}\n\n\t/**\n\t * Get a landmark by its uid\n\t * @param  {string} uid\n\t * @return {Landmark}\n\t */\n\tlandmarkByUid(uid) {\n\t\tfor (let i = 0; i < this.landmarks.length; i++) {\n\t\t\tif (this.landmarks[i].uid == uid) {\n\t\t\t\treturn this.landmarks[i];\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass Landmark {\n\t/**\n\t * Landmark\n\t * @param  {string} uid             UID of the landmark\n\t * @param  {float} options.x        Current x position\n\t * @param  {float} options.y        Current y position\n\t * @param  {int} options.n          Path loss exponent\n\t * @param  {int} options.txPower    Transmit power\n\t * @param  {float} options.noise    Noise level\n\t * @param  {int} options.range      Range\n\t * @return {Landmark}\n\t */\n\tconstructor(uid, {x, y}, {n, txPower, noise, range}) {\n\t\tthis.uid = uid;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.landmarkRange = range;\n\t\tthis.n = n;\n\t\tthis.txPower = txPower;\n\t\tthis.noise = noise;\n\t}\n\n\t/**\n\t * Returns true when a point x,y is in range\n\t * @param  {float}  x\n\t * @param  {float}  y\n\t * @return {Boolean}\n\t */\n\tisInRange(x, y) {\n\t\treturn this.distanceTo(x, y) <= this.landmarkRange;\n\t}\n\n\t/**\n\t * Distance from this landmark to a x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float}\n\t */\n\tdistanceTo(x, y) {\n\t\treturn Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2));\n\t}\n\n\t/**\n\t * RSSI value without noise at x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float} RSSI value\n\t */\n\trssiAtRaw(x, y) {\n\t\treturn this.txPower - ((10 * this.n) *  log(Math.max(this.distanceTo(x, y), 0.1), 10));\n\t}\n\n\t/**\n\t * RSSI with noise at x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float}\n\t */\n\trssiAt(x, y) {\n\t\treturn this.rssiAtRaw(x, y) + randn(0, this.noise);\n\t}\n}\n\n/**\n * Convert RSSI to distance\n * @param  {float} rssi\n * @param  {object} landmarkConfig Should at least contain a txPower and n field\n * @return {float}\n */\nexport function rssiToDistance(rssi, landmarkConfig) {\n\treturn Math.pow(10, (rssi - landmarkConfig.txPower) / (-10 * landmarkConfig.n));\n}","import User from '../models/user';\nimport { randn } from '../util/math';\nimport { polarToCartesian, cartesianToPolar, addTheta } from '../util/coordinate-system';\n\nclass SimulatedUser extends User {\n\t/**\n\t * Create a simulated user\n\t * @param  {object} position     Position of the user\n\t * @param  {int} v               Speed of the user\n\t * @param  {int} options.xRange  Max range in x direction (both - and +)\n\t * @param  {int} options.yRange  Max range in y direciotn (both - and +)\n\t * @param  {int} options.padding Padding substracted from the max range\n\t * @return {SimulatedUser}\n\t */\n\tconstructor(position, v, {xRange, yRange, padding}) {\n\t\tsuper(position);\n\n\t\tthis.v = v;\n\t\tthis.xRange = xRange;\n\t\tthis.yRange = yRange;\n\t\tthis.padding = padding;\n\n\t\tthis.lastControl = {r: 0, theta: 0};\n\t\tthis.iteration = 0;\n\t}\n\n\tsetPath(distances, angles) {\n\t\tthis.distances = distances;\n\t\tthis.angles = angles;\n\t}\n\n\t/**\n\t * Make a semi-random warlk\n\t * @return {SimulatedUser}\n\t */\n\trandomWalk() {\n\t\tlet {r, theta} = this._newStep();\n\n\t\t//Save the current x,y locally\n\t\tconst lastX = this.x;\n\t\tconst lastY = this.y;\n\n\t\tconst {dx, dy} = polarToCartesian(r, addTheta(theta, this.theta));\n\n\t\tconst newX = this._constrainCoordinate(lastX + dx, this.xRange - this.padding, -this.xRange + this.padding);\n\t\tconst newY = this._constrainCoordinate(lastY + dy, this.yRange - this.padding, -this.yRange + this.padding);\n\n\t\t//Compute the new control\n\t\tlet control = cartesianToPolar(newX - lastX, newY - lastY);\n\n\t\t//Move to the new position\n\t\tthis.move({r: control.r, theta: control.theta});\n\n\t\tthis.lastControl = {r: control.r, theta: control.theta};\n\n\t\treturn this;\n\t}\n\n\tgetLastControl() {\n\t\treturn this.lastControl;\n\t}\n\n\t/**\n\t * Constrain a value using a max,min value\n\t * @param  {Number} value\n\t * @param  {Number} max\n\t * @param  {Number} min\n\t * @return {Number}\n\t */\n\t_constrainCoordinate(value, max, min) {\n\t\tif (value > max) {\n\t\t\treturn max;\n\t\t}\n\t\telse if (value < min) {\n\t\t\treturn min;\n\t\t}\n\n\t\treturn value;\n\t}\n\t/**\n\t * Generate a new step\n\t * @return {object}\n\t */\n\t_newStep() {\n\t\tif (this.distances !== undefined && this.angles !== undefined) {\n\t\t\tif (this.iteration < this.distances.length) {\n\t\t\t\tconst step = {r: this.distances[this.iteration], theta: this.angles[this.iteration]};\n\t\t\t\tthis.iteration++;\n\n\t\t\t\treturn step;\n\t\t\t}\n\t\t\telse if (this.iteration == this.distances.length) {\n\t\t\t\tconsole.debug('Simulater reached end of trace data');\n\n\t\t\t\treturn {r: 0, theta: 0};\n\t\t\t}\n\n\t\t\tthis.iteration++;\n\t\t}\n\n\t\treturn {r: Math.abs(randn(this.v, 1)), theta: randn(0.1, 0.2)};\n\t}\n}\n\nexport default SimulatedUser;","/**\n * Add two radials\n * @param {float} t1\n * @param {float} t2\n * @return {float} Sum of t1 and t2\n */\nexport function addTheta(t1, t2) {\n\tlet theta = t1 + t2;\n\tconst twoPi = Math.PI * 2;\n\n\tif (theta > (twoPi)) {\n\t\ttheta -= twoPi;\n\t}\n\telse if (theta < 0) {\n\t\ttheta += twoPi;\n\t}\n\n\treturn theta;\n}\n\n/**\n * Convert polar coordinates to cartesian coordinates\n * @param  {float} r\n * @param  {float} theta\n * @return {object}\n */\nexport function polarToCartesian(r, theta) {\n\tconst dx = r * Math.cos(theta);\n\tconst dy = r * Math.sin(theta);\n\n\treturn {dx, dy};\n}\n\n/**\n * Convert cartesian coordiantes to polar coordinates\n * @param  {float} dx  x value from 0,0\n * @param  {float} dy  y value from 0,0\n * @return {object}\n */\nexport function cartesianToPolar(dx, dy) {\n\n\tconst r = Math.sqrt((dx * dx) + (dy * dy));\n\n\tlet theta;\n\n\t//Theta can be computed using tan^-1 when x != 0\n\tif (dx !== 0) {\n\t\ttheta = Math.atan(dy / dx);\n\n\t\t//Compensate for negative values of dx and dy\n\t\tif (dx < 0) {\n\t\t\ttheta += Math.PI;\n\t\t}\n\t\telse if (dy < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t}\n\telse {\n\t\tif (dy >= 0) {\n\t\t\ttheta = 0;\n\t\t}\n\t\telse {\n\t\t\ttheta = -Math.PI;\n\t\t}\n\t}\n\n\treturn {r, theta};\n}\n\n/**\n * Convert a value in degrees to a radian value\n * @param  {Number} degrees\n * @return {Number}\n */\nexport function degreeToRadian(degrees) {\n\treturn degrees * (Math.PI / 180);\n}\n\n/**\n * Finds the smallest rotation to the local north (wich is 90deg on a radial axis)\n * @param  {Number} degrees\n * @return {Number}\n */\nexport function rotationToLocalNorth(degrees) {\n\n\tconst left = degrees - 90;\n\tconst right = 360 - degrees + 90;\n\n\treturn Math.min(left, right);\n}","class LinkedList {\n\t/**\n\t * Create a new linked linst\n\t * @param  {LinkedList} base The previous link\n\t * @return LinkedList\n\t */\n\tconstructor(base = undefined) {\n\t\tif (base !== undefined && typeof base != 'object') {\n\t\t\tconsole.error('Base must be a LinkedList');\n\t\t}\n\n\t\tthis.list = [base];\n\t}\n\n\tadd(element) {\n\t\tthis.list.push(element);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return a flat array of the linked list\n\t * @return {Array}\n\t */\n\tvalues() {\n\t\tlet values = [];\n\n\t\t//First element of the list is another list or undefined\n\t\tif (this.list[0] !== undefined) {\n\t\t\tvalues = this.list[0].values();\n\t\t}\n\n\t\tvalues = values.concat(this.list.slice(1));\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * Only return the elements of this list and not of its parents\n\t * @return {Array}\n\t */\n\tcurrentValues() {\n\t\treturn this.list.slice(1);\n\t}\n\n\t/**\n\t * Return true when this parent has a parent list\n\t * @return {Boolean}\n\t */\n\thasParent() {\n\t\treturn this.list[0] !== undefined;\n\t}\n\n\t/**\n\t * Return the last object in the list\n\t * @return {mixed}\n\t */\n\tlast() {\n\t\treturn this.list[this.list.length - 1];\n\t}\n\n\t/**\n\t * Return the base of this linked list\n\t * @return {undefined|LinkedList}\n\t */\n\tgetBase() {\n\t\treturn this.list[0];\n\t}\n}\n\nexport default LinkedList;","/**\n * Random following normal distribution\n * @param  {float} mean mean\n * @param  {float} sd   standard deviation\n * @return {float}\n */\nexport function randn(mean, sd) {\n\n\t//Retrieved from jStat\n\tlet u;\n\tlet v;\n\tlet x;\n\tlet y;\n\tlet q;\n\n\tdo {\n\t\tu = Math.random();\n\t\tv = 1.7156 * (Math.random() - 0.5);\n\t\tx = u - 0.449871;\n\t\ty = Math.abs(v) + 0.386595;\n\t\tq = x * x + y * (0.19600 * y - 0.25472 * x);\n\t} while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));\n\n\treturn (v / u) * sd + mean;\n}\n\n/**\n * pdf for a normal distribution\n * @param  {Number} x\n * @param  {Number} mean\n * @param  {Number} sd\n * @return {Number}\n */\nexport function pdfn(x, mean, sd) {\n\treturn (1 / (sd * Math.sqrt(2 * Math.PI))) * Math.exp(-(Math.pow(x - mean, 2)) / (2 * sd * sd));\n}\n\n/**\n * Compute the log with a given base\n *\n * Used primarily as log10 is not implemented yet on mobile browsers\n * @param  {int}\n * @param  {int}\n * @return {float}\n */\nexport function log(x, base) {\n\treturn Math.log(x) / Math.log(base);\n}\n\n/**\n * Calculates two eigenvalues and eigenvectors from a 2x2 covariance matrix\n * @param  {Array} cov\n * @return {object}\n */\nexport function eigenvv(cov) {\n\n\tconst a = cov[0][0];\n\tconst b = cov[0][1];\n\tconst c = cov[1][0];\n\tconst d = cov[1][1];\n\n\tconst A = 1;\n\tconst B = -(a + d);\n\n\t//const C = (a * d) - (c * b);\n\n\tconst L1 = (-B + Math.sqrt((Math.pow(a - d, 2) + (4 * c * d))) / 2 * A);\n\tconst L2 = (-B - Math.sqrt((Math.pow(a - d, 2) + (4 * c * d))) / 2 * A);\n\n\tconst y1 = (L1 - a) / b;\n\tconst y2 = (L2 - a) / b;\n\tconst mag1 = Math.sqrt(1 + (y1 * y1));\n\tconst mag2 = Math.sqrt(1 + (y2 * y2));\n\n\treturn {\n\t\tvalues: [L1, L2],\n\t\tvectors: [[1 / mag1, y1 / mag1], [1 / mag2, y2 / mag2]]\n\t};\n}\n\n/**\n * Calculate the variance of an array given a value function\n * @param  {Array} data\n * @param  {Function} valueFunc Function that maps an array element to a number\n * @return {Number}\n */\nexport function variance(data, valueFunc) {\n\n\tlet sum = 0;\n\tlet sumSq = 0;\n\tconst n = data.length;\n\n\tdata.forEach((d) => {\n\n\t\tconst value = valueFunc(d);\n\n\t\tsum += value;\n\t\tsumSq += (value * value);\n\t});\n\n\treturn (sumSq - ((sum * sum) / n)) / n;\n}","/**\n * Normalize a set of weights\n * @param  {Array} weights\n * @return {Array}\n */\nexport function normalizeWeights(weights) {\n\tconst totalWeight = weights.reduce((total, w) => total + w, 0);\n\n\treturn weights.map(w => w / totalWeight);\n}\n\n/**\n * Convert an array of weights to an cumulative sum array\n * @param  {Array} weights\n * @return {Array}\n */\nexport function weightedCumulativeSum(weights) {\n\n\tconst normalisedWeights = normalizeWeights(weights);\n\n\tlet total = 0;\n\treturn normalisedWeights.map(w => {\n\t\ttotal = w + total;\n\t\treturn total;\n\t});\n}\n\n/**\n * Samples a new set using a low variance sampler from a array of weights\n * @param {Number} nSamples Number of samples to sample\n * @param {Array} weights \tWeight array\n * @return {Array} An array with indices corresponding to the selected weights\n */\nexport function lowVarianceSampling(nSamples, weights) {\n\n\tconst M = weights.length;\n\tconst normalizedWeights = normalizeWeights(weights);\n\n\tconst rand = Math.random() * (1 / M);\n\n\tlet c = normalizedWeights[0];\n\tlet i = 0;\n\n\tconst set = [];\n\n\tfor (let m = 1; m <= nSamples; m++) {\n\t\tconst U = rand + (m - 1) * (1 / M);\n\n\t\twhile (U > c) {\n\t\t\ti = i + 1;\n\t\t\tc = c + normalizedWeights[i];\n\t\t}\n\n\t\tset.push(i);\n\t}\n\n\treturn set;\n}\n\n/**\n * Sample using roulette wheel sampler from a array of weights\n * @param {Number} nSamples Number of samples to sample\n * @param {Array} weights \tWeight array\n * @return {Array} An array with indices corresponding to the selected weights\n */\nexport function rouletteWheelSampling(nSamples, weights) {\n\n\tconst stackedWeights = weightedCumulativeSum(weights);\n\tconst set = [];\n\n\tfor (let i = 0; i < nSamples; i++) {\n\n\t\tconst rand = Math.random();\n\n\t\tfor (var m = 0; m < stackedWeights.length; m++) {\n\n\t\t\tif (stackedWeights[m] >= rand) {\n\t\t\t\tset.push(m);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn set;\n}\n\n/**\n * Calculate the effective number of particles\n * @see http://en.wikipedia.org/wiki/Particle_filter#Sequential_importance_resampling_.28SIR.29\n * @return {Number}\n */\nexport function numberOfEffectiveParticles(weights) {\n\tconst normalisedWeights = normalizeWeights(weights);\n\n\treturn 1 / normalisedWeights.reduce((total, w) => total + (w * w));\n}","import { eigenvv } from '../util/math';\n\nclass Visualizer {\n\n\t/**\n\t * Create new visualizer\n\t * @param  {String} element Id of the canvas\n\t * @param  {Number} xMax\n\t * @param  {Number} yMax\n\t * @return {Visualizer}\n\t */\n\tconstructor(element, xMax, yMax) {\n\t\tthis.element = element;\n\t\tthis.xMax = xMax;\n\t\tthis.yMax = yMax;\n\n\t\tthis.canvas = document.getElementById(element);\n\t\tthis.ctx = this.canvas.getContext('2d');\n\n\t\tthis._scaleCanvas();\n\t}\n\n\t/**\n\t * Plot the particle set\n\t * @param  {ParticleSet} particleSet\n\t * @return {Visualizer}\n\t */\n\tplotParticleSet(particleSet) {\n\n\t\tconst best = particleSet.bestParticle();\n\n\t\t//Plot user traces\n\t\tparticleSet.particles().forEach((p) => {\n\t\t\tif (p !== best) {\n\t\t\t\tthis.plotUserTrace(p.user);\n\t\t\t}\n\t\t});\n\n\t\t//Plot best last\n\t\tthis.plotUserTrace(best.user, '#11913E');\n\n\t\t//this.plotLandmarksErrors(best);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the canvas\n\t * @return {Visualizer}\n\t */\n\tclearCanvas() {\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a user object on the canvas\n\t * @param  {User} user\n\t * @param  {String} color\n\t * @param  {float} Range of the sensor\n\t * @return {Visualizer}\n\t */\n\tplotUserTrace(user, color = '#C7C7C7', range = undefined) {\n\t\t//@todo This can possibly be optimised by only plotting traces that have\n\t\t//\t\tnot yet been plotted.\n\n\t\tthis.ctx.lineJoin = 'round';\n\t\tthis.ctx.lineWidth = 0.1;\n\t\tthis.ctx.fillStyle = '#960E0E';\n\t\tthis.ctx.strokeStyle = color;\n\n\t\tthis.ctx.beginPath();\n\n\t\tuser.trace.values().forEach(({x, y, theta}, i) => {\n\n\t\t\tif (i === 0) {\n\t\t\t\tthis.ctx.moveTo(this._tx(x), this._ty(y));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.ctx.lineTo(this._tx(x), this._ty(y));\n\t\t\t}\n\t\t});\n\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\n\t\tif (range !== undefined) {\n\t\t\tthis.ctx.strokeStyle = '#C7C7C7';\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.arc(this._tx(user.x), this._ty(user.y), range, 0, Math.PI * 2, true);\n\t\t\tthis.ctx.stroke();\n\t\t\tthis.ctx.closePath();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a set of objects as squares\n\t * @param {Array} objects An array of objects with at least an x,y value\n\t * @param {string} fillStyle\n\t * @return {Visualizer}\n\t */\n\tplotObjects(objects, fillStyle = '#000000') {\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.35;\n\n\t\tobjects.forEach((o) => {\n\n\t\t\t//Compensate for landmark size\n\t\t\tvar x = this._tx(o.x) - (0.35 * size);\n\t\t\tvar y = this._ty(o.y) - (0.35 * size);\n\n\t\t\tthis.ctx.fillRect(x, y, size, size);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot the predictions of each landmark\n\t * @param  {Array} particles\n\t * @param  {Array} landmarks\n\t * @param  {String} fillStyle\n\t * @return {Visualizer}\n\t */\n\tplotLandmarkPredictions(particles, landmarks = undefined, fillStyle = '#941313') {\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.5;\n\n\t\tparticles.forEach((p) => {\n\t\t\tp.landmarks.forEach((l, uid) => {\n\n\t\t\t\t//Compensate for landmark size\n\t\t\t\tconst x = this._tx(l.x) - (0.5 * size);\n\t\t\t\tconst y = this._ty(l.y) - (0.5 * size);\n\n\t\t\t\tthis.ctx.fillRect(x, y, size, size);\n\n\t\t\t\tif (landmarks !== undefined) {\n\t\t\t\t\tconst trueL = landmarks.landmarkByUid(uid);\n\n\t\t\t\t\tthis.ctx.strokeStyle = '#8C7A7A';\n\t\t\t\t\tthis.ctx.beginPath();\n\t\t\t\t\tthis.ctx.moveTo(x, y);\n\t\t\t\t\tthis.ctx.lineTo(this._tx(trueL.x), this._ty(trueL.y));\n\t\t\t\t\tthis.ctx.stroke();\n\t\t\t\t\tthis.ctx.closePath();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a landmark initialisation particle set\n\t * @param  {LandmarkInitializationSet} landmarkSet\n\t * @param  {String} fillStyle\n\t * @return {Visualizer}\n\t */\n\tplotLandmarkInitParticles(landmarkSet, fillStyle = '#2EFF3C') {\n\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.5;\n\n\t\tfor (let set of landmarkSet.particleSets()) {\n\n\t\t\tset.particles.forEach((p) => {\n\n\t\t\t\t//Compensate for landmark size\n\t\t\t\tconst x = this._tx(p.x) - (0.5 * size);\n\t\t\t\tconst y = this._ty(p.y) - (0.5 * size);\n\n\t\t\t\tthis.ctx.fillRect(x, y, size, size);\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot elipses of the landmark errors\n\t * @param  {Particle} particle\n\t * @return {Visualizer}\n\t */\n\tplotLandmarksErrors(particle) {\n\n\t\tparticle.landmarks.forEach((l) => {\n\n\t\t\tconst{ values, vectors } = eigenvv(l.cov);\n\n\t\t\tlet major;\n\t\t\tlet minor;\n\n\t\t\tif (values[0] > values[1]) {\n\t\t\t\tmajor = [\n\t\t\t\t\tvectors[0][0] * Math.sqrt(values[0]),\n\t\t\t\t\tvectors[0][1] * Math.sqrt(values[0])\n\t\t\t\t];\n\t\t\t\tminor = [\n\t\t\t\t\tvectors[1][0] * Math.sqrt(values[1]),\n\t\t\t\t\tvectors[1][1] * Math.sqrt(values[1])\n\t\t\t\t];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmajor = [\n\t\t\t\t\tvectors[1][0] * Math.sqrt(values[1]),\n\t\t\t\t\tvectors[1][1] * Math.sqrt(values[1])\n\t\t\t\t];\n\t\t\t\tminor = [\n\t\t\t\t\tvectors[0][0] * Math.sqrt(values[0]),\n\t\t\t\t\tvectors[0][1] * Math.sqrt(values[0])\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tlet beginX = 0;\n\t\t\tlet beginY = 0;\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.strokeStyle = '#B06D6D';\n\t\t\tfor (let i = 0; i < 16; i++) {\n\n\t\t\t\tconst r = Math.PI * (i / 8);\n\t\t\t\tconst x = this._tx(minor[0] * Math.cos(r) + major[0] * Math.sin(r) + l.x);\n\t\t\t\tconst y = this._ty(minor[1] * Math.cos(r) + major[1] * Math.sin(r) + l.y);\n\n\t\t\t\tif (isNaN(x)) {\n\t\t\t\t\tconsole.log({m0: minor[0], m1: minor[1], mm0: major[0], mm1: major[1]});\n\t\t\t\t\tconsole.log({values, vectors});\n\t\t\t\t}\n\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tthis.ctx.moveTo(x, y);\n\t\t\t\t\tbeginX = x;\n\t\t\t\t\tbeginY = y;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.ctx.lineTo(x, y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.ctx.lineTo(beginX, beginY);\n\t\t\tthis.ctx.stroke();\n\t\t\tthis.ctx.closePath();\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Scale the canvas\n\t * @return {void}\n\t */\n\t_scaleCanvas() {\n\n\t\t//Use 1.99 scale on retina devices\n\t\tconst scaleFactor = window.devicePixelRatio && window.devicePixelRatio === 2 ? 1.99 : 1;\n\n\t\t//Get desired width of the canvas\n\t\tconst width = Math.min(window.innerWidth, window.innerHeight);\n\n\t\t//Make the canvas smaller with css\n\t\tthis.canvas.width = width * scaleFactor;\n\t\tthis.canvas.height = width * scaleFactor;\n\t\tthis.canvas.style.width = width + 'px';\n\t\tthis.canvas.style.height = width + 'px';\n\n\t\tvar scaleFactorX = (width * scaleFactor) / this.xMax;\n\t\tvar scaleFactorY = (width * scaleFactor) / this.yMax;\n\n\t\t//Scale the canvas to translate coordinates to pixels\n\t\tthis.ctx.scale(scaleFactorX, scaleFactorY);\n\t}\n\n\t_tx(x) {\n\t\treturn x + (this.xMax / 2);\n\t}\n\n\t_ty(y) {\n\t\treturn this.yMax - (y + (this.yMax / 2));\n\t}\n}\n\nexport default Visualizer;","import ParticleSet from './models/particle-set';\nimport Visualizer from './view/visualizer';\nimport SimulatedUser from './simulation/user';\nimport { SimulatedLandmarkSet } from './simulation/landmark';\nimport Sensor from './models/sensor';\n\nwindow.SlacENV = 'debug';\n\nwindow.SlacApp = {\n\n\tparticleSet: undefined,\n\tvisualizer: undefined,\n\tuser: undefined,\n\tlandmarks: undefined,\n\tsensor: undefined,\n\n\tlandmarkConfig: {\n\t\tn: 2,\n\t\ttxPower: -12,\n\t\tnoise: 2,\n\t\trange: 20\n\t},\n\n\tinitialize: function() {\n\t\t'use strict';\n\n\t\tthis.particleSet = new ParticleSet(40, {x: 0, y: 0, theta: 0});\n\t\tthis.visualizer = new Visualizer('slac-map', 100, 100);\n\t\tthis.user = new SimulatedUser({x: 0, y: 0, theta: 0.0}, 2, {xRange: 50, yRange: 50, padding: 5});\n\n\t\t//Add simulated data to the user object\n\t\t//this._addSimulatedData();\n\n\t\tthis.landmarks = new SimulatedLandmarkSet(5, {xRange: 50, yRange: 50}, 50, this.landmarkConfig);\n\t\tthis.sensor = new Sensor(this.landmarkConfig);\n\n\t\t//Start broadcasting of the simulated landmarks\n\t\t//Broadcasts are sent to the sensor, the user object is used to find nearby landmarks\n\t\tthis.landmarks.startBroadcast(this.sensor, this.user);\n\t},\n\n\tstep: function() {\n\t\tthis.user.randomWalk();\n\n\t\t//Get accelerometer data\n\t\t// ...\n\n\t\t//Transform to angle and distance\n\t\t//Simulate this by getting the control from the simulated user\n\t\tconst {r, theta} = this.user.getLastControl();\n\n\t\t//Sample a new pose for each particle in the set\n\t\tthis.particleSet.samplePose({r, theta});\n\n\t\t//Get the latest observation\n\t\tconst observations = this.sensor.getObservations();\n\n\t\tobservations.forEach((obs) => this.particleSet.processObservation(obs));\n\n\t\tthis.particleSet.resample();\n\n\t\t//Update the canvas\n\t\tthis.visualizer.clearCanvas()\n\t\t\t\t\t\t.plotUserTrace(this.user, 'blue', this.landmarkConfig.range)\n\t\t\t\t\t\t.plotObjects(this.landmarks.landmarks)\n\t\t\t\t\t\t.plotParticleSet(this.particleSet);\n\n\t\tif (window.SlacENV == 'debug') {\n\t\t\tthis.visualizer.plotLandmarkPredictions(this.particleSet.particles(), this.landmarks);\n\t\t\tthis.visualizer.plotLandmarkInitParticles(this.particleSet.landmarkInitSet);\n\t\t}\n\t\telse {\n\t\t\tthis.visualizer.plotLandmarkPredictions([this.particleSet.bestParticle()], this.landmarks);\n\t\t}\n\t},\n\n\t_addSimulatedData: function() {\n\t\tconst thetas =\n\t\t\t[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08099418560036185, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.002454369260617026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004363323129985824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006544984694978736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001908953869368798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.006272276999354622, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001090830782496456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08290313946973066, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.11344640137963143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.09272061651219876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007363107781851078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.20453077171808548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1598067096357308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1990766178056032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.241619018322965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1562615095926173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.22552926428114228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.23425591054111392, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.31334114227210697, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.22362031041177347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0681769239060285, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.12871803233458182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08426667794785123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0995383089028016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006544984694978736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003272492347489368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06899504699290084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06599526234103559, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0719948316447661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13199052468207118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.12408200150897186, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1892591407631351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13335406316019174, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13717197089892932, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13799009398580167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10471975511965978, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10608329359778035, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0703585854710214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.004363323129985824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001090830782496456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004636030825609938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08699375490409236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004908738521234052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002181661564992912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000818123086872342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001908953869368798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.002181661564992912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.005726861608106394, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06463172386291502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08835729338221293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06844963160165261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.004908738521234052, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00136353847812057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08235772407848242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09844747812030515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17862354063379465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.275162064884731, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2519819107566813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.41369757426178094, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.37879098922189436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5162356678164478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4955098829490151, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.32288591161895097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25443628001729834, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14862569411514212, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11017390903214205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0859029241215959, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007635815477475192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007635815477475192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007363107781851078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029997846518652537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0719948316447661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07308566242726255, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1366265555076811, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.11671889372712078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07526732399225546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003817907738737596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.24461880297483024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3239767424014474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.26207209549477356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.28197975727533386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19144080232812802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13880821707267402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07063129316664553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0040906154343617095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0040906154343617095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001908953869368798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.001636246173744684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.003272492347489368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06299547768917033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00545415391248228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003545200043113482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007090400086226964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07635815477475191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09272061651219876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20398535632683726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18953184845875923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20153098706622025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1502619402888868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15162547876700738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.149013120932523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09626581655531224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09326603190344698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007635815477475192, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007363107781851078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003817907738737596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272707695624114, 0.0];\n\t\tconst distances = thetas.map(() => 0.16);\n\n\t\tthis.user.setPath(distances, thetas);\n\t}\n};","import LandmarkInitializationSet from '../app/models/landmark-init-set';\n\nif (window.test === undefined) {\n\twindow.test = {};\n}\n\n/**\n * Pattern that the user walks\n * @yield {Number}\n */\nfunction* walkPattern() {\n\tconst steps = 40;\n\tconst stepSize = 2;\n\tconst quarter = steps / 4;\n\n\tfor (let i = 0; i < steps; i++) {\n\t\tif (i < quarter) {\n\t\t\tyield {dx: stepSize, dy: 0};\n\t\t}\n\t\telse if (i < (2 * quarter)) {\n\t\t\tyield {dx: 0, dy: stepSize};\n\t\t}\n\t\telse if (i < (3 * quarter)) {\n\t\t\tyield {dx: -stepSize, dy: 0};\n\t\t}\n\t\telse if (i < steps) {\n\t\t\tyield {dx: 0, dy: -stepSize}; \n\t\t}\n\t}\n}\n\nwindow.test.landmarkInit = {\n\n\tlandmarkSet: undefined,\n\tuserX: 0,\n\tuserY: 0,\n\tlX: 0,\n\tlY: 0,\n\tuserTrace: [],\n\txMax: 50,\n\tyMax: 50,\n\tctx: undefined,\n\tcanvas: undefined,\n\n\tpattern: undefined,\n\n\tinitialize: function() {\n\n\t\t//Init random landmark\n\t\tthis.lX = Math.random() * 30 - 15;\n\t\tthis.lY = Math.random() * 30 - 15;\n\n\t\tthis.landmarkSet = new LandmarkInitializationSet();\n\t\tthis.canvas = document.getElementById('test-content');\n\t\tthis.ctx = this.canvas.getContext('2d');\n\t\tthis.ctx.scale(10, 10);\n\n\t\tthis.userTrace.push({x: this.userX, y: this.userY});\n\n\t\tthis.pattern = walkPattern();\n\t},\n\n\titerate: function() {\n\n\t\tconst {dx, dy} = this.pattern.next().value;\n\n\t\tthis.userX = this.userX + dx;\n\t\tthis.userY = this.userY + dy;\n\t\tconsole.log({dx, dy})\n\t\tthis.userTrace.push({x: this.userX, y: this.userY});\n\n\t\tconst r = Math.sqrt(Math.pow(this.lX - this.userX, 2) + Math.pow(this.lY - this.userY, 2));\n\n\t\tthis.landmarkSet.addMeasurement('uid', this.userX, this.userY, r);\n\n\t\tthis._draw();\n\t\tconsole.debug(`True r: ${r}`);\n\t},\n\n\t_draw: function() {\n\n\t\tthis.ctx.clearRect (0, 0, this.canvas.width, this.canvas.height);\n\t\tthis.ctx.fillStyle = '#000000';\n\n\t\tthis.landmarkSet.particles.get('uid').particles.forEach((p) => {\n\n\t\t\tconst x = this._tx(p.x);\n\t\t\tconst y = this._ty(p.y);\n\n\t\t\tthis.ctx.fillRect(x, y, 0.3, 0.3);\n\t\t});\n\n\t\tthis.ctx.fillStyle = '#ff0000';\n\t\tthis.userTrace.forEach((t) => this.ctx.fillRect(this._tx(t.x), this._ty(t.y), 0.5, 0.5));\n\n\t\tthis.ctx.fillStyle = '#00ff00';\n\t\tthis.ctx.fillRect(this._tx(this.lX), this._ty(this.lY), 0.5, 0.5);\n\t},\n\n\t_tx: function(x) {\n\t\treturn x + (this.xMax / 2);\n\t},\n\n\t_ty: function(y) {\n\t\treturn this.yMax - (y + (this.yMax / 2));\n\t}\n};","import VoteAccumulator from '../app/models/vote-accumulator';\n\nif (window.test === undefined) {\n\twindow.test = {};\n}\n\nwindow.test.voting = {\n\n\tvotes: undefined,\n\tuserX: 0,\n\tuserY: 0,\n\ttrace: [],\n\n\tlX: -5,\n\tlY: 10,\n\n\tlR: 0,\n\tlC: 0,\n\n\tinitialize: function() {\n\t\tthis.votes = new VoteAccumulator(75, 5);\n\n\t\tconst {row, column} = this.votes._cartesianToCell(this.lX, this.lY);\n\t\tthis.lR = row;\n\t\tthis.lC = column;\n\n\t\t//Create a table to show the votes\n\t\tdocument.getElementById('test-content').innerHTML = this._createOutputTable();\n\t\tthis._displayLandmark();\n\t},\n\n\titerate: function() {\n\n\t\tthis.userX += Math.random() * 4 - 2;\n\t\tthis.userY += Math.random() * 6 - 3;\n\n\t\tthis.trace.push({x: this.userX, y: this.userY});\n\n\t\tconst r = Math.sqrt(Math.pow(this.lX - this.userX, 2) + Math.pow(this.lY - this.userY, 2)) + (Math.random() * 6 - 3);\n\n\t\tthis.votes.addMeasurement(this.userX, this.userY, r);\n\n\t\tdocument.getElementById('test-content').innerHTML = '';\n\t\tdocument.getElementById('test-content').innerHTML = this._createOutputTable();\n\t\tthis._displayLandmark();\n\t\tthis._displayUser();\n\t},\n\n\t_createOutputTable: function() {\n\n\t\tlet table = '<table>';\n\n\t\ttable += this.votes.votes.reduce((output, row, rowN) => {\n\t\t\treturn output\n\t\t\t\t\t+ '<tr>'\n\t\t\t\t\t+ row.reduce((rowOutput, cell, columnN) => {\n\t\t\t\t\t\tconst color = 'background-color: rgba(0, 0, 0, ' + (cell / 50) + ');';\n\t\t\t\t\t\tconst id = rowN + '' + columnN;\n\n\t\t\t\t\t\treturn rowOutput +\n\t\t\t\t\t\t\t\t'<td id=\"' + id + '\" style=\"' + color + '\">'\n\t\t\t\t\t\t\t\t+ cell +\n\t\t\t\t\t\t\t\t'</td>';\n\t\t\t\t\t}, '')\n\n\t\t\t\t\t+ '</tr>';\n\t\t}, '');\n\n\t\ttable += '</table>';\n\t\treturn table;\n\t},\n\n\t_displayLandmark: function() {\n\t\tdocument.getElementById(this.lR + '' + this.lC).style.backgroundColor = 'red';\n\t},\n\n\t_displayUser: function() {\n\t\tthis.trace.forEach((pos) => {\n\t\t\tconst {row, column} = this.votes._cartesianToCell(pos.x, pos.y);\n\n\t\t\tdocument.getElementById(row + '' + column).style.backgroundColor = 'green';\n\t\t});\n\t}\n};"]}