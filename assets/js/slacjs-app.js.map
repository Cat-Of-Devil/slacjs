{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/app/app.js","src/app/models/particle-set.js","src/app/models/particle.js","src/app/models/sensor.js","src/app/models/user.js","src/app/simulation/landmark.js","src/app/simulation/user.js","src/app/util/coordinate-system.js","src/app/util/linked-list.js","src/app/util/math.js","src/app/view/visualizer.js"],"names":[],"mappings":"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","file":"slacjs-app.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import ParticleSet from './models/particle-set';\nimport Visualizer from './view/visualizer';\nimport SimulatedUser from './simulation/user';\nimport { SimulatedLandmarkSet } from './simulation/landmark';\nimport Sensor from './models/sensor';\n\n/* global window */\n/* global console */\n/* global math */\n\nwindow.app = {\n\n\tparticleSet: undefined,\n\tvisualizer: undefined,\n\tuser: undefined,\n\tlandmarks: undefined,\n\tsensor: undefined,\n\n\tlandmarkConfig: {\n\t\tn: 2,\n\t\ttxPower: -12, \n\t\tnoise: 2,\n\t\trange: 20\n\t},\n\n\tinitialize: function() {\n\t\t'use strict';\n\n\t\tthis.particleSet = new ParticleSet(40, {x: 0, y: 0, theta: 0});\n\t\tthis.visualizer = new Visualizer('slac-map', 100, 100);\n\t\tthis.user = new SimulatedUser({x: 0, y: 0, theta: 0.0}, 2, {xRange: 50, yRange: 50, padding: 5});\n\t\tthis.landmarks = new SimulatedLandmarkSet(10, {xRange: 50, yRange: 50}, 50, this.landmarkConfig);\n\t\tthis.sensor = new Sensor(this.landmarkConfig);\n\n\t\t//Start broadcasting of the simulated landmarks\n\t\t//Broadcasts are sent to the sensor, the user object is used to find nearby landmarks\n\t\tthis.landmarks.startBroadcast(this.sensor, this.user)\n\t},\n\n\tstep: function() {\n\n\t\tthis.user.randomWalk();\n\n\t\t//Get accelerometer data\n\t\t// ...\n\t\t\n\t\t//Transform to angle and distance\n\t\t//Simulate this by getting the control from the simulated user\n\t\tconst {r, theta} = this.user.getLastControl();\n\n\t\t//Sample a new pose for each particle in the set\n\t\tthis.particleSet.samplePose({r, theta});\n\n\t\t//Get the latest observation\n\t\tconst observations = this.sensor.getObservations();\n\n\t\tobservations.forEach((obs) => this.particleSet.processObservation(obs));\n\n\t\tthis.particleSet.resample();\n\n\t\t//Update the canvas\n\t\tthis.visualizer.clearCanvas()\n\t\t\t\t\t\t.plotUserTrace(this.user, 'blue', this.landmarkConfig.range)\n\t\t\t\t\t\t.plotParticleSet(this.particleSet)\n\t\t\t\t\t\t.plotObjects(this.landmarks.landmarks)\n\t\t\t\t\t\t.plotLandmarkPredictions(this.particleSet.particles(), this.landmarks);\n\t}\n};","import Particle from './particle';\n\nclass ParticleSet {\n\t/**\n\t * Create a new particle set with a given number of particles\n\t * @param  {int} nParticles    \t Number of particles\n\t * @param  {float} options.x     Initial x postion of user\n\t * @param  {float} options.y     Initial y position of user\n\t * @param  {float} options.theta Initial theta of user\n\t * @return ParticleSet\n\t */\n\tconstructor(nParticles, {x, y, theta}) {\n\t\tthis.nParticles = nParticles;\n\n\t\tthis.particleList = [];\n\n\t\tfor (let i = 0; i < nParticles; i++) {\n\t\t\tthis.particleList.push(new Particle({x, y, theta}));\n\t\t}\n\t}\n\n\t/**\n\t * Given a control, let each particle sample a new user position\n\t * @param  {[type]} control [description]\n\t * @return {ParticleSet}\n\t */\n\tsamplePose(control) {\n\t\tthis.particleList.forEach((p) => p.samplePose(control));\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Let each particle process an observation\n\t * @param  {object} obs\n\t * @return {ParticleSet}\n\t */\n\tprocessObservation(obs) {\n\n\t\tif (obs !== {}) {\n\t\t\tthis.particleList.forEach((p) => p.processObservation(obs));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resample the internal particle list using their weights\n\t *\n\t * Uses a low variance sample\n\t * @return {ParticleSet}\n\t */\n\tresample() {\n\t\tconst variance = this._weightVariance();\n\t\tconsole.log(variance)\n\t\tif (variance > 100) {\n\t\t\tthis._lowVarianceSampling();\n\t\t}\n\n\t\tconsole.log(this.particleList.map(p => p.weight));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get particles\n\t * @return {[Array]\n\t */\n\tparticles() {\n\t\treturn this.particleList;\n\t}\n\n\t/**\n\t * Return the particle with the heighest weight\n\t * @return {Particle}\n\t */\n\tbestParticle() {\n\t\tlet best = this.particleList[0];\n\n\t\tthis.particleList.forEach((p) => {\n\t\t\tif (p.weight > best.weight) {\n\t\t\t\tbest = p;\n\t\t\t}\n\t\t});\n\n\t\treturn best;\n\t}\n\n\t/**\n\t * Samples a new particle set\n\t */\n\t_lowVarianceSampling() {\n\t\tconst M = this.particleList.length;\n\t\tconst weights = this._calculateStackedWeights();\n\t\tconst rand = Math.random() * (1 / M);\n\n\t\tlet c = weights[0];\n\t\tlet i = 0;\n\n\t\tconst newParticleSet = [];\n\n\t\tfor (let m = 1; m <= M; m++) {\n\t\t\tconst U = rand + (m - 1) * (1 / M);\n\n\t\t\twhile (U > c) {\n\t\t\t\ti = i + 1;\n\t\t\t\tc = c + weights[i];\n\t\t\t}\n\n\t\t\tnewParticleSet.push(new Particle({}, this.particleList[i]));\n\t\t}\n\n\t\tthis.particleList = newParticleSet;\n\t}\n\n\t/**\n\t * Calculates the variance of the weights\n\t * @return {float}\n\t */\n\t_weightVariance() {\n\t\tif(this.particleList.length < 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst weights = this.particleList.map(p => p.weight);\n\t\tconst sum = weights.reduce((w, total) => total + w, 0);\n\t\tconst mean = sum / weights.length;\n\t\tconsole.log(mean)\n\t\treturn weights.reduce((w, total) => {\n\t\t\tconsole.log((w - mean) * (w - mean))\n\t\t\treturn total + ((w - mean) * (w - mean))\n\n\t\t}, 0) / weights.length;\n\t}\n\n\t/**\n\t * Compute a list of normalised weights of the internal particle list\n\t * @return {Array}\n\t */\n\t_calculateNormalisedWeights() {\n\n\t\tif (this.particleList.length == 1) {\n\t\t\treturn [1];\n\t\t}\n\n\t\tconst weights = this.particleList.map(p => p.weight);\n\t\tconst max = Math.max.apply(null, weights);\n\t\tconst min = Math.min.apply(null, weights);\n\t\tconst diff = max - min;\n\n\t\t//If all weights are equal we just return an\n\t\t//array with 1/N\n\t\tif (diff === 0) {\n\t\t\tconst nw = 1 / weights.length;\n\t\t\treturn weights.map(w => nw);\n\t\t}\n\n\t\treturn weights.map(w => (w - min) / diff);\n\t}\n\n\t/**\n\t * Calculate a list of stacked normalised weights of the internal particle list\n\t * @return {Array}\n\t */\n\t_calculateStackedWeights() {\n\t\tconst weights = this.particleList.map(p => p.weight);\n\t\tconst min = Math.min.apply(null, weights);\n\n\t\tif (min < 0) {\n\t\t\t//Make sure all weights are above zero\n\t\t\tweights.forEach((w, i, a) => a[i] = w - min);\n\t\t}\n\n\t\tconst stackedWeights = [];\n\n\t\tlet total = 0;\n\t\tconst sums = weights.map(w => {\n\t\t\ttotal = w + total;\n\t\t\treturn total;\n\t\t});\n\n\t\treturn sums.map(w => w / total);\n\t}\n\n\t/**\n\t * Draw a weighted sample from from a list and return the index\n\t * @param  {Array} weights\n\t * @return {int}\n\t */\n\t_weightedRandomSample(weights) {\n\t\tconst rand = Math.random();\n\n\t\tfor (let m = 0; m < weights.length; m++) {\n\n\t\t\tif (weights[m] > rand) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\n\t\tconsole.error('Did not draw a sample');\n\t}\n}\n\nexport default ParticleSet;","import User from './user';\n\nclass Particle {\n\t/**\n\t * Create a new particle\n\t * @param  {float} options.x     Initial x position of user\n\t * @param  {float} options.y     Initial y position of user\n\t * @param  {float} options.theta Initial theta of user\n\t * @return {Particle}\n\t */\n\tconstructor({x, y, theta}, parent = undefined) {\n\n\t\tif (parent !== undefined) {\n\t\t\tthis.user = User.copyUser(parent.user);\n\t\t\tthis.landmarks = this._copyMap(parent.landmarks);\n\t\t}\n\t\telse {\n\t\t\tthis.user = new User({x, y, theta});\t\n\t\t\tthis.landmarks = new Map();\n\t\t}\n\n\t\tthis.weight = 1;\n\t}\n\n\t/**\n\t * Given a control, sample a new user position\n\t * @param  {[type]} control [description]\n\t * @return {Particle}\n\t */\n\tsamplePose(control) {\n\n\t\t//Do something with the control here\n\t\t//Random values for now\n\t\tconst r = control.r + (1 * Math.random() - 0.5);\n\t\tconst theta = control.theta + (1 * (Math.random() - 0.5));\n\n\t\tthis.user.move({r, theta});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Reset the weight of the particle\n\t * @return {Particle}\n\t */\n\tresetWeight() {\n\t\tthis.weight = 1;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Process a new observation for a landmark\n\t * @param  {string} options.id The id of the landmark\n\t * @param  {float} options.r   Range measurement to this landmark\n\t * @return {Particle}\n\t */\n\tprocessObservation({uid, r}) {\n\n\t\t//Update landmark\n\t\tif (this.landmarks.has(uid)) {\n\t\t\tthis._updateLandmark({uid, r});\n\t\t}\n\t\telse {\n\t\t\tthis._addLandmark({uid, r});\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register a new landmark\n\t * @param {string} options.uid\n\t * @param {flaot} options.r\n\t */\n\t_addLandmark({uid, r}) {\n\t\tlet {x, y} = this._getInitialEstimate(uid, r);\n\n\t\t//@todo find better values for initial covariance\n\t\tlet cov = [[-0.01, -0.01], [-0.01, -0.01]];\n\n\t\tthis.landmarks.set(uid, {x, y, cov});\n\t}\n\n\t_updateLandmark({uid, r}) {\n\n\t\tconst landmark = window.app.landmarks.landmarkByUid(uid);\n\t\tconst l = this.landmarks.get(uid);\n\t\tconst dx = this.user.x - l.x;\n\t\tconst dy = this.user.y - l.y;\n\n\t\t//@todo find better values for default coviarance\n\t\tconst errorCov = Math.random() - 0.5;\n\n\t\tconst dist = Math.max(0.01, Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)));\n\n\t\t//Compute innovation\n\t\tconst v = r - dist;\n\n\t\t//Compute Jacobian\n\t\tconst H = [-dx / dist, -dy / dist];\n\n\t\t//Compute innovation covariance\n\t\t//covV = H * Cov_s * H^T + error\n\t\tconst HxCov = [\tl.cov[0][0] * H[0] + l.cov[0][1] * H[1],\n\t\t\t\t\t\tl.cov[1][0] * H[0] + l.cov[1][1] * H[1]];\n\n\t\tconst covV = HxCov[0] * H[0] + HxCov[1] * H[1] + errorCov;\n\n\t\t//Kalman gain\n\t\tconst K = [HxCov[0] * (1 / covV), HxCov[1] * (1 / covV)];\n\n\t\t//Do we need to translate this? regarding robot pose\n\t\tconst newX = l.x + (K[0] * v); \n\t\tconst newY = l.y + (K[1] * v);\n\n\t\tconst deltaCov = K[0] * K[0] * covV + K[1] * K[1] * covV;\n\n\t\tconst newCov = [[l.cov[0][0] - deltaCov, l.cov[0][1] - deltaCov],\n\t\t\t\t\t\t[l.cov[1][0] - deltaCov, l.cov[1][1] - deltaCov]];\n\n\t\t//console.log(-1 * (v * (1 / covV) * v));\n\t\tthis.weight = this.weight - v * (1 / covV) * v;\n\n\t\t//Update particle\n\t\tl.x = newX;\n\t\tl.y = newY;\n\t\tl.cov = newCov;\n\t}\n\n\t/**\n\t * Deep copy a mpa\n\t * @param  {Map} map\n\t * @return {Map}\n\t */\n\t_copyMap(map) {\n\t\tconst copy = new Map();\n\n\t\tfor (let [key, value] of map.entries()) {\n\t\t\tcopy.set(key, this._copyLandmark(value));\n\t\t}\n\n\t\treturn copy;\n\t}\n\n\t/**\n\t * Deep copy a landmark\n\t * @param  {object} landmark\n\t * @return {landmark}\n\t */\n\t_copyLandmark(landmark) {\n\t\tlet copy = {};\n\n\t\tcopy.x = landmark.x;\n\t\tcopy.y = landmark.y;\n\t\tcopy.cov = [...landmark.cov];\n\n\t\treturn copy;\n\t}\n\n\t/**\n\t * Get an initial estimate of a particle\n\t * @param  {string} uid\n\t * @param  {float} r\n\t * @return {object}\n\t */\n\t_getInitialEstimate(uid, r) {\n\t\t//Cheat here for now to get a rough estimate\n\t\t//Start ugly hack, should be removed when we have\n\t\t//a good way to estimate the initial position\n\t\tconst landmark = window.app.landmarks.landmarkByUid(uid);\n\t\tconst trueX = landmark.x;\n\t\tconst trueY = landmark.y;\n\n\t\treturn {x: trueX + (3 * Math.random() - 1.5), y: trueY + (3 * Math.random() - 1.5)};\n\t}\n}\n\nexport default Particle;","class Sensor {\n\t/**\n\t * Sensor\n\t * @param  {int} options.n\n\t * @param  {int} options.txPower\n\t * @param  {int} options.noise\n\t * @param  {int} options.range\n\t * @return {Senser}\n\t */\n\tconstructor({n, txPower, noise, range}) {\n\t\tthis.landmarks = new Map();\n\t\tthis.iteration = 0;\n\t\tthis.landmarkConfig = {n, txPower, noise, range};\n\t}\n\n\t/**\n\t * Process a new observation\n\t * @param {string} options.uid\n\t * @param {float} options.rssi\n\t */\n\taddObservation({uid, rssi}) {\n\t\tif (this.landmarks.has(uid)) {\n\t\t\tthis._updateLandmark(uid, rssi);\n\t\t}\n\t\telse {\n\t\t\tthis._registerLandmark(uid, rssi);\n\t\t}\n\t}\n\n\t/**\n\t * Get all averaged observations since the last request\n\t *\n\t * Updates the interal iteration counter\n\t * @return {Array}\n\t */\n\tgetObservations() {\n\t\tconst observedLandmarks = [];\n\n\t\t//Get all the landmarks that have been upated during the current iteration\n\t\tthis.landmarks.forEach((l, uid) => {\n\t\t\tif (l.iteration === this.iteration) {\n\t\t\t\tobservedLandmarks.push({uid, r: this._rssiToDistance(l.rssi)});\n\t\t\t}\n\t\t});\n\n\t\tthis.iteration++;\n\n\t\treturn observedLandmarks;\n\t}\n\n\t/**\n\t * Update a landmark given a new rssi observation\n\t * @param  {float} uid\n\t * @param  {float} rssi\n\t * @return {void}\n\t */\n\t_updateLandmark(uid, rssi) {\n\n\t\tconst landmark = this.landmarks.get(uid);\n\t\tconst alpha = this._computeAlpha(rssi, landmark.iteration);\n\n\t\tlandmark.rssi = (rssi * alpha) + (landmark.rssi * (1 - alpha));\n\t\tlandmark.iteration = this.iteration;\n\t}\n\n\t/**\n\t * Add a new landmark to the interal list\n\t * @param  {string} uid  Landanme uid\n\t * @param  {float} rssi  Current RSSI value\n\t * @return {void}\n\t */\n\t_registerLandmark(uid, rssi) {\n\t\tthis.landmarks.set(uid, {\n\t\t\tuid: uid,\n\t\t\trssi: rssi,\n\t\t\titeration: this.iteration\n\t\t});\n\t}\n\n\t/**\n\t * Compute the alpha for the exponential weigthed average\n\t * @param  {float} rssi\n\t * @param  {int} previousIteration\n\t * @return {float}\n\t */\n\t_computeAlpha(rssi, previousIteration) {\n\t\t//See http://www.hindawi.com/journals/ijdsn/aa/195297/\n\t\t//Alpha is based on the RSSI (larger values means larger alpha)\n\t\t//The difference in time defines the maximum value of alpha, this increases\n\t\t//with the time between the previous observation.\n\t\t//\n\t\t//@todo Currently we only use the timediff\n\t\tconst timeDiff = Math.max(this.iteration - previousIteration, 1);\n\n\t\tconst timeFactor = 1 - (1 / (Math.pow(timeDiff, 1.5) + 1));\n\t\t//const rssiFactor = Math.min(1, 1 - (0.5 * ((-10 - rssi) / 60)));\n\n\t\treturn timeFactor;\n\t}\n\n\t/**\n\t * Convert RSSI to a distance estimate\n\t * @param  {float} rssi\n\t * @return {float}\n\t */\n\t_rssiToDistance(rssi) {\n\t\treturn Math.pow(10, (rssi - this.landmarkConfig.txPower) / (-10 * this.landmarkConfig.n));\n\t}\n}\n\nexport default Sensor;","import { addTheta, polarToCartesian } from '../util/coordinate-system';\nimport LinkedList from '../util/linked-list';\n\nclass User {\n\t/**\n\t * Create a new user\n\t * @param  {float} options.x     Starting x location of the user\n\t * @param  {float} options.y     Starting y location of the user\n\t * @param  {float} options.theta Direction of the user in radials relative to the x-axis\n\t * @param  {LinkedList} trace \t Optional trace to extend\n\t * @return {User}\n\t */\n\tconstructor({x, y, theta}, trace = undefined) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.theta = theta;\n\n\t\tif (trace === undefined) {\n\t\t\tthis.trace = new LinkedList().add({x, y, theta});\n\t\t}\n\t\telse {\n\t\t\t//We use a LinkedList here to make use of the reference to the\n\t\t\t//trace instead of copying the whole list\n\t\t\tthis.trace = new LinkedList(trace);\n\t\t}\n\t}\n\n\t/**\n\t * Move a user to a new position\n\t * @param  {float} r\n\t * @param  {float} theta\n\t * @return {User}\n\t */\n\tmove({r, theta}) {\n\t\tconst dTheta = addTheta(theta, this.theta);\n\t\tconst {dx, dy} = polarToCartesian(r, dTheta);\n\n\t\tthis.x += dx;\n\t\tthis.y += dy;\n\t\tthis.theta = dTheta;\n\n\t\tthis.trace.add({x: this.x, y: this.y, theta: this.theta});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Safely copy a user object\n\t * @param  {User} user User to copy\n\t * @return {User}\n\t */\n\tstatic copyUser(user) {\n\t\treturn new User({\n\t\t\tx: user.x,\n\t\t\ty: user.y,\n\t\t\ttheta: user.theta\n\t\t}, user.trace);\n\t}\n}\n\nexport default User;","import { log, randn } from '../util/math';\n\nexport class SimulatedLandmarkSet {\n\n\tconstructor(N, {xRange, yRange}, updateRate, landmarkConfig) {\n\t\tthis.landmarks = [];\n\t\tthis.xRange = xRange;\n\t\tthis.yRange = yRange;\n\t\tthis.updateRate = updateRate;\n\t\tthis.landmarkConfig = landmarkConfig;\n\t\tthis.broadcastId = undefined;\n\n\t\tfor (let i = 0; i < N; i++) {\n\t\t\tthis.landmarks.push(this._randomLandmark('landmark-' + i));\n\t\t}\n\t}\n\n\tstartBroadcast(sensor, user) {\n\t\tthis.broadcastId = window.setTimeout(() => this._broadCast(sensor, user), this.updateRate);\n\t}\n\n\tstopBroadCast() {\n\t\tif(this.broadcastId !== undefined) {\n\t\t\twindow.clearTimeout(this.broadcastId)\n\t\t}\n\t}\n\n\t/**\n\t * Set the update rate of the landmarks\n\t * @param {float} updateRate\n\t * @return {SimulatedLandmarkSet}\n\t */\n\tsetUpdateRate(updateRate) {\n\t\tthis.updateRate = updateRate;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Simulate RSSI measurements for all landmarks in range\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {Array}\n\t */\n\tmeasurementsAtPoint(x, y) {\n\t\tconst landmarks = this.landmarksInRange(x, y);\n\t\tconst measurements = [];\n\n\t\treturn landmarks.forEach((l) => measurements.push({uid: l.uid, rssi: l.rssiAt(x, y)}));\n\t}\n\n\t/**\n\t * Get a random measurement from a device in range\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {object}\n\t */\n\trandomMeasurementAtPoint(x, y) {\n\t\tconst landmarks = this.landmarksInRange(x, y);\n\n\t\tif (landmarks.length > 0) {\n\t\t\tconst landmark = landmarks[Math.floor(Math.random() * landmarks.length)];\n\t\t\t\n\t\t\treturn {uid: landmark.uid, rssi: landmark.rssiAt(x, y)};\n\t\t}\n\t}\n\n\t/**\n\t * Return all landmarks within range of a given x,y position\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {Array}\n\t */\n\tlandmarksInRange(x, y) {\n\t\treturn this.landmarks.filter((l) => l.isInRange(x, y));\n\t}\n\n\t/**\n\t * Create a landmark at a random position\n\t * @param  {string} uid UID\n\t * @return {Landmark}\n\t */\n\t_randomLandmark(uid) {\n\t\treturn new Landmark(uid, {\n\t\t\tx: Math.random() * (2 * this.xRange) - this.xRange,\n\t\t\ty: Math.random() * (2 * this.yRange) - this.yRange\n\t\t}, this.landmarkConfig);\n\t}\n\n\t/**\n\t * Simulate a broadcast\n\t *\n\t * Sets a timeout to run this function again after a fixed amount of time\n\t * @param  {Sensor} sensor\n\t * @param  {User} user\n\t * @return {void}\n\t */\n\t_broadCast(sensor, user) {\n\t\t\n\t\tconst measurement = this.randomMeasurementAtPoint(user.x, user.y);\n\t\t\n\t\tif (measurement !== undefined) {\n\t\t\tsensor.addObservation(measurement);\n\t\t}\n\n\t\tthis.broadcastId = window.setTimeout(() => this._broadCast(sensor, user), this.updateRate);\n\t}\n\n\t/**\n\t * Get a landmark by its uid\n\t * @param  {string} uid\n\t * @return {Landmark}\n\t */\n\tlandmarkByUid(uid) {\n\t\tfor(let i = 0; i < this.landmarks.length; i++) {\n\t\t\tif(this.landmarks[i].uid == uid) {\n\t\t\t\treturn this.landmarks[i];\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass Landmark {\n\t/**\n\t * Landmark\n\t * @param  {string} uid             UID of the landmark\n\t * @param  {float} options.x        Current x position\n\t * @param  {float} options.y        Current y position\n\t * @param  {int} options.n          Path loss exponent\n\t * @param  {int} options.txPower    Transmit power\n\t * @param  {float} options.noise    Noise level\n\t * @param  {int} options.range      Range\n\t * @return {Landmark}\n\t */\n\tconstructor(uid, {x, y}, {n, txPower, noise, range}) {\n\t\tthis.uid = uid;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.landmarkRange = range;\n\t\tthis.n = n;\n\t\tthis.txPower = txPower;\n\t\tthis.noise = noise;\n\t}\n\n\t/**\n\t * Returns true when a point x,y is in range\n\t * @param  {float}  x\n\t * @param  {float}  y\n\t * @return {Boolean}\n\t */\n\tisInRange(x, y) {\n\t\treturn this.distanceTo(x, y) <= this.landmarkRange;\n\t}\n\n\t/**\n\t * Distance from this landmark to a x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float}\n\t */\n\tdistanceTo(x, y) {\n\t\treturn Math.sqrt(Math.pow(this.x - x, 2) + Math.pow(this.y - y, 2));\n\t}\n\n\t/**\n\t * RSSI value without noise at x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float} RSSI value\n\t */\n\trssiAtRaw(x, y) {\n\t\treturn -(10 * this.n) *  log(Math.max(this.distanceTo(x, y), 0.1), 10) + this.txPower;\n\t}\n\n\t/**\n\t * RSSI with noise at x,y point\n\t * @param  {float} x\n\t * @param  {float} y\n\t * @return {float}\n\t */\n\trssiAt(x, y) {\n\t\treturn this.rssiAtRaw(x, y) + randn(0, this.noise);\n\t}\n}\n\n/**\n * Convert RSSI to distance\n * @param  {float} rssi\n * @param  {object} landmarkConfig Should at least contain a txPower and n field\n * @return {float}\n */\nexport function rssiToDistance(rssi, landmarkConfig) {\n\treturn Math.pow(10, (rssi - landmarkConfig.txPower) / (-10 * landmarkConfig.n));\n}","import User from '../models/user';\nimport { randn } from '../util/math';\nimport { polarToCartesian, cartesianToPolar, addTheta } from '../util/coordinate-system';\n\nclass SimulatedUser extends User {\n\t/**\n\t * Create a simulated user\n\t * @param  {object} position     Position of the user\n\t * @param  {int} v               Speed of the user\n\t * @param  {int} options.xRange  Max range in x direction (both - and +)\n\t * @param  {int} options.yRange  Max range in y direciotn (both - and +)\n\t * @param  {int} options.padding Padding substracted from the max range\n\t * @return {SimulatedUser}\n\t */\n\tconstructor(position, v, {xRange, yRange, padding}) {\n\t\tsuper(position);\n\n\t\tthis.v = v;\n\t\tthis.xRange = xRange;\n\t\tthis.yRange = yRange;\n\t\tthis.padding = padding;\n\n\t\tthis.lastControl = {r: 0, theta: 0};\n\t}\n\n\t/**\n\t * Make a semi-random warlk\n\t * @return {SimulatedUser}\n\t */\n\trandomWalk() {\n\t\tlet r = Math.abs(randn(this.v, 1));\n\t\tlet theta = randn(0.1, 0.2);\n\n\t\t//Save the current x,y locally\n\t\tconst lastX = this.x;\n\t\tconst lastY = this.y;\n\n\t\tconst {dx, dy} = polarToCartesian(r, addTheta(theta, this.theta));\n\n\t\tlet newX = lastX + dx;\n\t\tlet newY = lastY + dy;\n\n\t\t//Constrain the user position and compute the actual dx,dy values\n\t\tif (newX > (this.xRange - this.padding)) {\n\t\t\tnewX = this.xRange - this.padding;\n\t\t}\n\t\telse if (newX < (-this.xRange + this.padding)) {\n\t\t\tnewX = -this.xRange + this.padding;\n\t\t}\n\n\t\tif (newY > (this.yRange - this.padding)) {\n\t\t\tnewY = this.yRange - this.padding;\n\t\t}\n\t\telse if (newY < (-this.yRange + this.padding)) {\n\t\t\tnewY = -this.yRange + this.padding;\n\t\t}\n\n\t\t//Compute the new control\n\t\tlet control = cartesianToPolar(newX - lastX, newY - lastY);\n\n\t\t//Update theta by substracting the current pose\n\t\tcontrol.theta -= this.theta;\n\n\t\t//Move to the new position\n\t\tthis.move({r: control.r, theta: control.theta});\n\n\t\tthis.lastControl = {r: control.r, theta: control.theta};\n\n\t\treturn this;\n\t}\n\n\tgetLastControl() {\n\t\treturn this.lastControl;\n\t}\n}\n\nexport default SimulatedUser;","/**\n * Add two radials\n * @param {float} t1\n * @param {float} t2\n * @return {float} Sum of t1 and t2\n */\nexport function addTheta(t1, t2) {\n\tlet theta = t1 + t2;\n\tconst twoPi = Math.PI * 2;\n\n\tif (theta > (twoPi)) {\n\t\ttheta -= twoPi;\n\t}\n\telse if (theta < 0) {\n\t\ttheta += twoPi;\n\t}\n\n\treturn theta;\n}\n\n/**\n * Convert polar coordinates to cartesian coordinates\n * @param  {float} r\n * @param  {float} theta\n * @return {object}\n */\nexport function polarToCartesian(r, theta) {\n\tconst dx = r * Math.cos(theta);\n\tconst dy = r * Math.sin(theta);\n\n\treturn {dx, dy};\n}\n\n/**\n * Convert cartesian coordiantes to polar coordinates\n * @param  {float} dx  x value from 0,0\n * @param  {float} dy  y value from 0,0\n * @return {object}\n */\nexport function cartesianToPolar(dx, dy) {\n\n\tconst r = Math.sqrt((dx * dx) + (dy * dy));\n\t\n\tlet theta;\n\n\t//Theta can be computed using tan^-1 when x != 0\n\tif (dx !== 0) {\n\t\ttheta = Math.atan(dy / dx);\n\n\t\t//Compensate for negative values of dx and dy\n\t\tif (dx < 0) {\n\t\t\ttheta += Math.PI;\n\t\t}\n\t\telse if (dy < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t}\n\telse {\n\t\tif (dy >= 0) {\n\t\t\ttheta = 0\n\t\t}\n\t\telse {\n\t\t\ttheta = - Math.PI;\n\t\t}\n\t}\n\n\treturn {r, theta};\n}","class LinkedList {\n\t/**\n\t * Create a new linked linst\n\t * @param  {LinkedList} base The previous link\n\t * @return LinkedList\n\t */\n\tconstructor(base = undefined) {\n\t\tif (base !== undefined && typeof base != 'object') {\n\t\t\tconsole.error(\"Base must be a LinkedList\");\n\t\t}\n\n\t\tthis.list = [base];\n\t}\n\n\tadd(element) {\n\t\tthis.list.push(element);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return a flat array of the linked list\n\t * @return {Array}\n\t */\n\tvalues() {\n\t\tlet values = [];\n\n\t\t//First element of the list is another list or undefined\n\t\tif (this.list[0] !== undefined) {\n\t\t\tvalues = this.list[0].values();\n\t\t}\n\n\t\tvalues = values.concat(this.list.slice(1));\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * Return the last object in the list\n\t * @return {mixed}\n\t */\n\t\n\tlast() {\n\t\treturn this.list[this.list.length - 1];\n\t}\n\t/**\n\t * Return the base of this linked list\n\t * @return {undefined|LinkedList}\n\t */\n\tgetBase() {\n\t\treturn this.list[0];\n\t}\n}\n\nexport default LinkedList;","/**\n * Random following normal distribution\n * @param  {float} mean mean\n * @param  {float} sd   standard deviation\n * @return {float}      \n */\nexport function randn(mean, sd) {\n\n\t//Retrieved from jStat\n\tlet u, v, x, y, q, mat;\n\n\tdo {\n\t\tu = Math.random();\n\t\tv = 1.7156 * (Math.random() - 0.5);\n\t\tx = u - 0.449871;\n\t\ty = Math.abs(v) + 0.386595;\n\t\tq = x * x + y * (0.19600 * y - 0.25472 * x);\n\t} while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));\n\n\treturn (v/u) * sd + mean;\n}\n\n/**\n * Compute the log with a given base\n *\n * Used primarily as log10 is not implemented yet on mobile browsers\n * \n * @param  {int}\n * @param  {int}\n * @return {float}\n */\nexport function log(x, base) {\n\treturn Math.log(x) / Math.log(base);\n}","class Visualizer {\n\n\tconstructor(element, xMax, yMax) {\n\t\tthis.element = element;\n\t\tthis.xMax = xMax;\n\t\tthis.yMax = yMax;\n\n\t\tthis.canvas = document.getElementById(element);\n\t\tthis.ctx = this.canvas.getContext('2d');\n\n\t\tthis._scaleCanvas();\n\t}\n\n\tplotParticleSet(particleSet) {\n\n\t\tconst best = particleSet.bestParticle();\n\n\t\t//Plot user traces\n\t\tparticleSet.particles().forEach((p) => {\n\t\t\tif(p !== best) {\n\t\t\t\tthis.plotUserTrace(p.user)\n\t\t\t}\n\t\t});\n\n\t\t//Plot best last\n\t\tthis.plotUserTrace(best.user, '#11913E')\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the canvas\n\t * @return {Visualizer}\n\t */\n\tclearCanvas() {\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a user object on the canvas\n\t * @param  {User} user\n\t * @param  {String} color\n\t * @param  {float} Range of the sensor\n\t * @return {Visualizer}\n\t */\n\tplotUserTrace(user, color = '#C7C7C7', range = undefined) {\n\t\t//@todo This can possibly be optimised by only plotting traces that have\n\t\t//\t\tnot yet been plotted.\n\n\t\tthis.ctx.lineJoin = 'round';\n\t\tthis.ctx.lineWidth = .1;\n\t\tthis.ctx.fillStyle = '#960E0E';\n\t\tthis.ctx.strokeStyle = color;\n\n\t\tthis.ctx.beginPath();\n\n\t\tuser.trace.values().forEach(({x, y, theta}, i) => {\n\n\t\t\tif (i === 0) {\n\t\t\t\tthis.ctx.moveTo(this._tx(x), this._ty(y));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.ctx.lineTo(this._tx(x), this._ty(y));\n\t\t\t}\n\t\t});\n\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\n\t\tif (range !== undefined)\n\t\t{\n\t\t\tthis.ctx.strokeStyle = '#C7C7C7';\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.arc(this._tx(user.x), this._ty(user.y), range, 0, Math.PI*2,true);\n\t\t\tthis.ctx.stroke();\n\t\t\tthis.ctx.closePath();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Plot a set of objects as squares\n\t * @param {Array} objects An array of objects with at least an x,y value\n\t * @param {string} fillStyle\n\t * @return {Visualizer}\n\t */\n\tplotObjects(objects, fillStyle = '#000000') {\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.5;\n\n\t\tobjects.forEach((o) => {\n\n\t\t\t//Compensate for landmark size\n\t\t\tvar x = this._tx(o.x) - (0.5 * size);\n\t\t\tvar y = this._ty(o.y) - (0.5 * size);\n\n\t\t\tthis.ctx.fillRect(x, y, size, size);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\tplotLandmarkPredictions(particles, landmarks = undefined, fillStyle = '#941313') {\n\t\tthis.ctx.fillStyle = fillStyle;\n\t\tconst size = 0.5;\n\n\t\tparticles.forEach((p) => {\n\t\t\tp.landmarks.forEach((l, uid) => {\n\n\t\t\t\t//Compensate for landmark size\n\t\t\t\tvar x = this._tx(l.x) - (0.5 * size);\n\t\t\t\tvar y = this._ty(l.y) - (0.5 * size);\n\n\t\t\t\tthis.ctx.fillRect(x, y, size, size);\n\n\t\t\t\tif (landmarks !== undefined) {\n\t\t\t\t\tconst trueL = landmarks.landmarkByUid(uid);\n\n\t\t\t\t\tthis.ctx.strokeStyle = '#8C7A7A';\n\t\t\t\t\tthis.ctx.beginPath();\n\t\t\t\t\tthis.ctx.moveTo(x, y);\n\t\t\t\t\tthis.ctx.lineTo(this._tx(trueL.x), this._ty(trueL.y));\n\t\t\t\t\tthis.ctx.stroke();\n\t\t\t\t\tthis.ctx.closePath();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Scale the canvas\n\t * @return {void}\n\t */\n\t_scaleCanvas() {\n\n\t\t//Use 1.99 scale on retina devices\n\t\tconst scaleFactor = window.devicePixelRatio && window.devicePixelRatio === 2 ? 1.99 : 1;\n\n\t\t//Get desired width of the canvas\n\t\tconst width = Math.min(window.innerWidth, window.innerHeight);\n\n\t\t//Make the canvas smaller with css\n\t\tthis.canvas.width = width * scaleFactor;\n\t\tthis.canvas.height = width * scaleFactor;\n\t\tthis.canvas.style.width = width + 'px';\n\t\tthis.canvas.style.height = width + 'px';\n\n\t\tvar scaleFactorX = (width * scaleFactor) / this.xMax;\n\t\tvar scaleFactorY = (width * scaleFactor) / this.yMax;\n\n\t\t//Scale the canvas to translate coordinates to pixels\n\t\tthis.ctx.scale(scaleFactorX, scaleFactorY);\n\t}\n\n\t_tx(x) {\n\t\treturn x + (this.xMax / 2);\n\t}\n\n\t_ty(y) {\n\t\treturn this.yMax - (y + (this.yMax / 2));\n\t}\n}\n\nexport default Visualizer;"]}